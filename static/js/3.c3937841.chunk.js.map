{"version":3,"sources":["components/movie/MovieDetails/MovieBudget.js","components/movie/MovieDetails/MovieCast.js","components/movie/MovieDetails/MovieCollection.js","components/common/item/detail/PersonAvatarList.js","components/movie/MovieDetails/MovieCrew.js","components/movie/MovieDetails/MovieHeader.js","components/movie/MovieDetails/MovieProduction.js","components/movie/MovieDetails/MovieRecommendations.js","components/movie/MovieDetails/MovieReviews.js","containers/Movies.js"],"names":["MovieBudget","movie","useSelector","state","movies","budget","revenue","Grid","item","container","justify","alignItems","income","hasIncome","Statistic","col","count","toMillionsOrBillions","divider","key","label","Number","isNaN","renderStatistics","useStyles","makeStyles","theme","breakpoints","only","margin","spacing","horizontalScrollItemSpacing","lastEntry","padding","MovieCast","useTheme","isMobile","useMediaQuery","isSmallTablet","isBigTablet","isDesktop","up","classes","history","useHistory","cast","originalTitle","original_title","title","useState","cardCol","setCardCol","useEffect","getCastCol","className","ItemSeeMore","appbarTitle","collapsedClickEvent","scrollToID","collapsedContent","ItemHorizontalContainer","handleSeeMore","push","location","pathname","isWithSeeMore","length","maxCount","scrollAmount","slice","map","id","PersonAvatar","character","image","profile_path","name","isHorizontalScroll","expandedContent","ItemLazyLoad","contents","maxItemPerLoad","node","otherProps","type","isButtonShown","sectionId","seeMoreText","MovieCollection","anchorId","collectionContent","collection_content","overview","parts","ItemCardHorizontalList","items","isOverviewCollapsed","demo","backgroundColor","palette","background","paper","fontWeight","typography","h6","brokenImage","color","action","disabled","avatar","border","listItem","marginBottom","PersonAvatarList","content","xs","Typography","variant","List","disablePadding","person","job","profilePath","isImageValid","ListItem","ListItemAvatar","Avatar","alt","src","TMDB_IMAGE_PREFIX","BrokenImage","avatarSize","ListItemText","primary","secondary","defaultProps","PropTypes","arrayOf","shape","moreCrew","marginTop","paddingLeft","MovieCrew","crew","crewMembers","setCrewMembers","masonryConfig","setMasonryConfig","getCrewCol","crewCol","setCrewCol","getCrewMembers","director","writer","producer","executiveProducer","composer","cinematography","editor","costume","makeup","lighting","visualEffects","finalCrew","production","CREW_TO_DISPLAY","forEach","e","identifier","a","renderMasonryGrid","crewShowMore","crewSection","masonryGrid","Array","fill","colItemCount","memberCount","members","membersToDisplay","splice","MAX_CREW_ON_SHOW_LESS","crewTitle","filter","c","crewLabel","min","minIndex","j","i","isTotal","subtitle","chip","releaseYear","text","fontSize","h4","fontWeightLight","marginLeft","h5","ellipsis","fontFamily","lineHeight","letterSpacing","MovieHeader","sectionVisibility","facebook","genres","imdb","instagram","releaseDate","release_date","runtime","tagline","tmdb","twitter","breadcrumbs","MOVIE_BREADCRUMBS_CONFIG","visibilityId","runtimeHours","runtimeMinutes","moment","format","NO_DATE_TEXT","Chip","size","ItemLinks","TruncatedOverview","gutterBottom","ItemBreadcrumbs","width","MovieProduction","productionCompanies","production_companies","productionCountries","production_countries","spokenLanguages","spoken_languages","hasProductionCompany","hasProductionCountry","hasSpokenLanguages","renderProduction","direction","company","logoPath","logo_path","originCountry","origin_country","ProductionChip","country","enumerate","iso_3166_1","english_name","iso_639_1","MovieRecommendations","recommendations","areRecommendations","MovieReviews","reviews","reviewsUI","review","index","author","author_details","date","created_at","rating","ItemReview","isEpisode","root","trailer","height","between","note","Movies","itemDrawerOpen","sidebar","isMovieLoading","dispatch","useDispatch","isLoaded","setIsLoaded","usePath","movieId","belongsToCollection","belongs_to_collection","youtube","collection","Object","keys","hasStatistics","getMovieDetails","process","response","moviesActions","setActiveMovie","setDetailsLoading","error","data","status_code","undefined","Note","details","NOTE_NO_SELECTED_MOVIE","ComponentLoader","NOTE_MOVIE_NOT_FOUND","constructor","Section","isCollapsible","visible","controls","light","pip","url","ItemFooter","companies","link","year","ScrollToTop"],"mappings":"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","file":"static/js/3.c3937841.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Grid } from '@material-ui/core';\n\nimport Statistic from '../../common/item/detail/Statistic';\n\nimport { toMillionsOrBillions } from '../../../utils/functions';\n\nconst MovieBudget = () => {\n  const movie = useSelector((state) => state.movies.movie);\n\n  const { budget, revenue } = movie;\n\n  const renderStatistics = () => {\n    const income = revenue - budget;\n    const hasIncome = income > 0;\n\n    return [\n      (revenue !== 0 && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(revenue)}\n          divider\n          key=\"movie-budget-revenue\"\n          label=\"Revenue\"\n        />\n      )),\n      (budget !== 0 && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(budget)}\n          divider={!Number.isNaN(revenue) && hasIncome}\n          key=\"movie-budget-budget\"\n          label=\"Budget\"\n        />\n      )),\n      (hasIncome && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(income)}\n          key=\"movie-budget-income\"\n          label=\"Income\"\n        />\n      )),\n    ];\n  };\n\n  return (\n    <Grid item container justify=\"center\" alignItems=\"center\">\n      {renderStatistics()}\n    </Grid>\n  );\n};\n\nexport default MovieBudget;\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ItemHorizontalContainer from '../../common/item/ItemHorizontalContainer';\r\nimport ItemLazyLoad from '../../common/item/ItemLazyLoad';\r\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\r\nimport PersonAvatar from '../../common/item/detail/PersonAvatar';\r\n\r\nimport { getCastCol, scrollToID } from '../../../utils/functions';\r\n\r\nimport { MAX_CAST_HORIZONTAL_ITEMS as maxCount } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n    position: 'relative',\r\n    width: 'inherit',\r\n  },\r\n  horizontalScrollItemSpacing: {\r\n    margin: theme.spacing(0, 1),\r\n  },\r\n  lastEntry: {\r\n    padding: theme.spacing(1.5),\r\n  },\r\n}));\r\n\r\nconst SECTION_ID = 'cast';\r\n\r\nconst MovieCast = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('sm'));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only('md'));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const classes = useStyles();\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const history = useHistory();\r\n\r\n  const {\r\n    cast,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  const [cardCol, setCardCol] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCardCol(getCastCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  const handleSeeMore = () => {\r\n    history.push(`${history.location.pathname}/${SECTION_ID}`);\r\n  };\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <ItemSeeMore\r\n        appbarTitle={[title || originalTitle, 'Cast']}\r\n        collapsedClickEvent={() => scrollToID('movie-cast')}\r\n        collapsedContent={(\r\n          <ItemHorizontalContainer\r\n            handleSeeMore={handleSeeMore}\r\n            isWithSeeMore={cast.length > maxCount}\r\n            scrollAmount={144}\r\n          >\r\n            {cast.slice(0, maxCount).map((item) => (\r\n              <div\r\n                className={classes.horizontalScrollItemSpacing}\r\n                key={`movie-cast-person-avatar-${item.id}`}\r\n              >\r\n                <PersonAvatar\r\n                  character={item.character}\r\n                  col={12}\r\n                  image={item.profile_path}\r\n                  name={item.name}\r\n                  isHorizontalScroll\r\n                />\r\n              </div>\r\n            ))}\r\n            {cast.length <= maxCount && isMobile && (\r\n              <div className={classes.lastEntry} />\r\n            )}\r\n          </ItemHorizontalContainer>\r\n        )}\r\n        expandedContent={(\r\n          <Grid container spacing={2}>\r\n            <ItemLazyLoad\r\n              contents={cast}\r\n              maxItemPerLoad={20}\r\n              node={<PersonAvatar />}\r\n              otherProps={{ col: 12 / cardCol }}\r\n              type=\"itemCast\"\r\n            />\r\n          </Grid>\r\n        )}\r\n        isButtonShown={cast.length > maxCount}\r\n        sectionId={SECTION_ID}\r\n        seeMoreText={`Show all ${cast.length} cast`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieCast;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ItemCardHorizontalList from '../../common/item/ItemCardHorizontalList';\r\n\r\nconst MovieCollection = ({ anchorId }) => {\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    collection_content: collectionContent,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  if (!collectionContent) return null;\r\n\r\n  const { overview, parts } = collectionContent;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      appbarTitle={[title || originalTitle, 'Collection']}\r\n      anchorId={anchorId}\r\n      items={parts}\r\n      isOverviewCollapsed\r\n      overview={overview}\r\n    />\r\n  );\r\n};\r\n\r\nMovieCollection.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default MovieCollection;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Avatar,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport BrokenImage from '../../BrokenImage';\r\n\r\nimport { TMDB_IMAGE_PREFIX } from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    fontWeight: theme.typography.h6.fontWeight,\r\n  },\r\n  brokenImage: {\r\n    color: theme.palette.action.disabled,\r\n  },\r\n  avatar: {\r\n    border: `1px solid ${theme.palette.brokenImage.border}`,\r\n  },\r\n  listItem: {\r\n    '&:last-child': {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst PersonAvatarList = ({\r\n  col = 12,\r\n  content,\r\n  title,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={col}>\r\n      {title && (\r\n        <Typography variant=\"body1\" className={classes.title}>\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      <List disablePadding>\r\n        {content.map((person) => {\r\n          const {\r\n            job,\r\n            name,\r\n            profile_path: profilePath,\r\n          } = person;\r\n          const isImageValid = profilePath !== null;\r\n\r\n          return (\r\n            <ListItem key={`person-avatar-list-${name}`} className={classes.listItem}>\r\n              <ListItemAvatar>\r\n                {isImageValid\r\n                  ? (\r\n                    <Avatar\r\n                      alt={`${name}'s avatar.`}\r\n                      className={classes.avatar}\r\n                      src={`${TMDB_IMAGE_PREFIX}/w154${profilePath}`}\r\n                    />\r\n                  )\r\n                  : <BrokenImage type=\"avatar\" avatarSize=\"small\" />}\r\n              </ListItemAvatar>\r\n              <ListItemText primary={name} secondary={job} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nPersonAvatarList.defaultProps = {\r\n  col: 12,\r\n  content: PropTypes.arrayOf(PropTypes.shape({\r\n    profile_path: '',\r\n  })),\r\n};\r\n\r\nPersonAvatarList.propTypes = {\r\n  col: PropTypes.number,\r\n  content: PropTypes.arrayOf(PropTypes.shape({\r\n    job: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    profile_path: PropTypes.string,\r\n  })),\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PersonAvatarList;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, Typography, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\r\nimport PersonAvatarList from '../../common/item/detail/PersonAvatarList';\r\nimport Statistic from '../../common/item/detail/Statistic';\r\n\r\nimport { getCrewMembers, getCrewCol, scrollToID } from '../../../utils/functions';\r\n\r\nimport { CREW_TO_DISPLAY, MAX_CREW_ON_SHOW_LESS } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  moreCrew: {\r\n    marginBottom: theme.spacing(2),\r\n    marginTop: theme.spacing(-2),\r\n    paddingLeft: theme.spacing(9),\r\n  },\r\n}));\r\n\r\nconst MovieCrew = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('sm'));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only('md'));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const classes = useStyles();\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    crew,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  const [crewMembers, setCrewMembers] = useState({});\r\n  const [masonryConfig, setMasonryConfig] = useState([]);\r\n  const [crewCol, setCrewCol] = useState(getCrewCol());\r\n\r\n  useEffect(() => {\r\n    setCrewCol(getCrewCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  useEffect(() => {\r\n    if (crew && crew.length > 0) {\r\n      const [director] = getCrewMembers(crew, 'directing', ['director']);\r\n      const [writer] = getCrewMembers(crew, 'writing');\r\n      const [producer, executiveProducer] = getCrewMembers(crew, 'production', ['producer', 'executive producer']);\r\n      const [composer] = getCrewMembers(crew, 'sound', ['original music composer']);\r\n      const [cinematography] = getCrewMembers(crew, 'camera', ['director of photography']);\r\n      const [editor] = getCrewMembers(crew, 'editing', ['editor']);\r\n      const [costume, makeup] = getCrewMembers(crew, 'costume & make-up', ['costume design', 'makeup artist']);\r\n      const [lighting] = getCrewMembers(crew, 'lighting');\r\n      const [visualEffects] = getCrewMembers(crew, 'visual effects');\r\n      const production = [...producer, ...executiveProducer];\r\n      const finalCrew = {\r\n        director,\r\n        writer,\r\n        production,\r\n        composer,\r\n        cinematography,\r\n        editor,\r\n        costume,\r\n        makeup,\r\n        lighting,\r\n        visualEffects,\r\n      };\r\n      setCrewMembers(finalCrew);\r\n\r\n      setMasonryConfig([]);\r\n      CREW_TO_DISPLAY.forEach((e) => {\r\n        if (finalCrew[e.identifier].length > 0) {\r\n          setMasonryConfig((a) => [...a, e.identifier]);\r\n        }\r\n      });\r\n    }\r\n  }, [movie, crew]);\r\n\r\n  const renderMasonryGrid = (crewShowMore) => {\r\n    const masonryGrid = Array(crewCol).fill([]);\r\n    let colItemCount = Array(crewCol).fill(0);\r\n    let crewSection;\r\n    let memberCount = 0;\r\n\r\n    for (let a = 0; a < masonryConfig.length; a += 1) {\r\n      if (!crewShowMore) {\r\n        if (masonryConfig[a] === 'composer'\r\n          || masonryConfig[a] === 'cinematography'\r\n          || masonryConfig[a] === 'editor'\r\n          || masonryConfig[a] === 'costume'\r\n          || masonryConfig[a] === 'makeup'\r\n          || masonryConfig[a] === 'lighting'\r\n          || masonryConfig[a] === 'visualEffects') break;\r\n      }\r\n\r\n      const members = [...crewMembers[masonryConfig[a]]];\r\n      memberCount = members.length;\r\n      const membersToDisplay = crewShowMore ? members : [...members.splice(0, MAX_CREW_ON_SHOW_LESS)];\r\n      const crewTitle = CREW_TO_DISPLAY.filter((c) => c.identifier === masonryConfig[a])[0];\r\n      const crewLabel = crewTitle.label(members.length);\r\n\r\n      crewSection = (\r\n        <>\r\n          <PersonAvatarList\r\n            key={`movie-crew-person-avatar-list-${crewTitle.identifier}`}\r\n            content={membersToDisplay}\r\n            title={crewLabel}\r\n          />\r\n          {!crewShowMore && members.length > 0 && (\r\n            <Grid item xs={12} className={classes.moreCrew}>\r\n              <Typography variant=\"caption\" color=\"textSecondary\">\r\n                {`...and ${members.length} more`}\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n        </>\r\n      );\r\n\r\n      if (crewCol > 1) {\r\n        let min = colItemCount[0];\r\n        let minIndex = 0;\r\n\r\n        for (let j = 1; j < crewCol; j += 1) {\r\n          if (min > colItemCount[j]) {\r\n            min = colItemCount[j];\r\n            minIndex = j;\r\n          }\r\n        }\r\n\r\n        colItemCount[minIndex] += memberCount;\r\n        masonryGrid[minIndex] = [...masonryGrid[minIndex], crewSection];\r\n      } else {\r\n        masonryGrid[0] = [...masonryGrid[0], crewSection];\r\n      }\r\n    }\r\n\r\n    return masonryGrid.map((e, i) => (\r\n      <Grid item xs={12 / crewCol} key={`movie-crew-masonry-grid-${i}`}>{e}</Grid>\r\n    ));\r\n  };\r\n\r\n  const renderStatistic = () => (\r\n    <Statistic\r\n      col={12 / crew.length}\r\n      count={crew.length}\r\n      isTotal\r\n      label=\"Total Crew\"\r\n    />\r\n  );\r\n\r\n  if (!('director' in crewMembers)) return null;\r\n\r\n  return (\r\n    <Grid container>\r\n      <ItemSeeMore\r\n        appbarTitle={[title || originalTitle, 'Crew']}\r\n        collapsedClickEvent={() => scrollToID('movie-crew')}\r\n        collapsedContent={(\r\n          <Grid container>\r\n            {renderMasonryGrid()}\r\n          </Grid>\r\n        )}\r\n        expandedContent={(\r\n          <Grid container spacing={2}>\r\n            {renderMasonryGrid(true)}\r\n            <Grid item container justify=\"center\" alignItems=\"center\">{renderStatistic()}</Grid>\r\n          </Grid>\r\n        )}\r\n        sectionId=\"crew\"\r\n        seeMoreText={`Show all ${crew.length} crew`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieCrew;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  Chip,\r\n  Grid,\r\n  Typography,\r\n  useMediaQuery,\r\n} from '@material-ui/core';\r\n\r\nimport ItemBreadcrumbs from '../../common/item/ItemBreadcrumbs';\r\nimport ItemLinks from '../../common/item/ItemLinks';\r\nimport TruncatedOverview from '../../common/TruncatedOverview';\r\n\r\nimport { MOVIE_BREADCRUMBS_CONFIG, NO_DATE_TEXT } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 600,\r\n  },\r\n  subtitle: {\r\n    fontWeight: 400,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.25, 0.5, 0.25, 0),\r\n  },\r\n  releaseYear: {\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.h4.fontSize,\r\n    fontWeight: theme.typography.fontWeightLight,\r\n    marginLeft: theme.spacing(2),\r\n    [theme.breakpoints.only('xs')]: {\r\n      marginLeft: theme.spacing(1),\r\n      fontSize: theme.typography.h5.fontSize,\r\n    },\r\n  },\r\n  ellipsis: {\r\n    fontSize: '1rem',\r\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\r\n    fontWeight: '400',\r\n    lineHeight: '1.5',\r\n    letterSpacing: '0.00938em',\r\n  }\r\n}));\r\n\r\nconst MovieHeader = ({ sectionVisibility }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    facebook,\r\n    genres,\r\n    imdb,\r\n    instagram,\r\n    original_title: originalTitle,\r\n    overview,\r\n    release_date: releaseDate,\r\n    runtime,\r\n    tagline,\r\n    title,\r\n    tmdb,\r\n    twitter,\r\n  } = movie;\r\n\r\n  const breadcrumbs = MOVIE_BREADCRUMBS_CONFIG.filter((e) => sectionVisibility[e.visibilityId]);\r\n  // eslint-disable-next-line no-bitwise\r\n  const runtimeHours = ~~(runtime / 60);\r\n  const runtimeMinutes = runtime % 60;\r\n\r\n  return (\r\n    <Grid item xs={12} container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography\r\n          className={classes.title}\r\n          variant={isMobile ? 'h4' : 'h2'}\r\n        >\r\n          {title || originalTitle}\r\n          {releaseDate && (\r\n            <span className={classes.releaseYear}>\r\n              {`(${moment(releaseDate).format('YYYY')})`}\r\n            </span>\r\n          )}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} container alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography\r\n            className={classes.subtitle}\r\n            color=\"textSecondary\"\r\n            variant={isMobile ? 'body1' : 'h6'}\r\n          >\r\n            {releaseDate ? moment(releaseDate).format('MMM D, YYYY') : NO_DATE_TEXT}\r\n            &nbsp;&middot;&nbsp;\r\n            {runtime\r\n              ? `${runtimeHours !== 0 ? `${runtimeHours}hr ` : ''}${runtimeMinutes !== 0 ? `${runtimeMinutes}min` : ''}`\r\n              : 'No runtime yet.'}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {genres.map((i) => (\r\n          <Chip\r\n            className={classes.chip}\r\n            key={`movie-header-chip-${i.id}`}\r\n            label={i.name}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n          />\r\n        ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <ItemLinks\r\n          facebook={facebook}\r\n          imdb={imdb}\r\n          instagram={instagram}\r\n          tmdb={tmdb}\r\n          twitter={twitter}\r\n        />\r\n      </Grid>\r\n      {overview && overview.length > 0 && (\r\n        <Grid item xs={12}>\r\n          <TruncatedOverview overview={overview} />\r\n        </Grid>\r\n      )}\r\n      {tagline && (\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n            variant=\"body1\"\r\n          >\r\n            <em>\r\n              {tagline}\r\n            </em>\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <ItemBreadcrumbs content={breadcrumbs} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nMovieHeader.propTypes = {\r\n  sectionVisibility: {\r\n    collection: false,\r\n  },\r\n};\r\n\r\nMovieHeader.propTypes = {\r\n  sectionVisibility: PropTypes.shape({\r\n    cast: PropTypes.bool.isRequired,\r\n    collection: PropTypes.bool,\r\n    crew: PropTypes.bool.isRequired,\r\n    production: PropTypes.bool.isRequired,\r\n    recommendations: PropTypes.bool.isRequired,\r\n    trailer: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieHeader;\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, Typography, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ProductionChip from '../../common/item/detail/ProductionChip';\r\n\r\nimport { enumerate } from '../../../utils/functions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: theme.typography.h6.fontWeight,\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nconst MovieProduction = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const classes = useStyles();\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    production_companies: productionCompanies,\r\n    production_countries: productionCountries,\r\n    spoken_languages: spokenLanguages,\r\n  } = movie;\r\n\r\n  const hasProductionCompany = productionCompanies && productionCompanies.length > 0;\r\n  const hasProductionCountry = productionCountries && productionCountries.length > 0;\r\n  const hasSpokenLanguages = spokenLanguages && spokenLanguages.length > 0;\r\n\r\n  const renderProduction = (title, items, xs = isMobile ? 12 : 6) => (\r\n    <Grid item xs={xs} container>\r\n      <Typography variant=\"body1\" gutterBottom className={classes.title}>\r\n        {title}\r\n      </Typography>\r\n      {items}\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Grid item container>\r\n      <Grid\r\n        alignItems=\"flex-start\"\r\n        container\r\n        direction=\"row\"\r\n        item\r\n        justify=\"flex-start\"\r\n        spacing={3}\r\n        xs={12}\r\n      >\r\n        {hasProductionCompany && renderProduction('Companies', productionCompanies.map((company) => {\r\n          const { id, logo_path: logoPath, name, origin_country: originCountry } = company;\r\n\r\n          return (\r\n            <Grid item key={`tv-show-production-production-company-chip-${id}`}>\r\n              <ProductionChip country={originCountry} image={logoPath} name={name} />\r\n            </Grid>\r\n          )\r\n        }), 12)}\r\n        {hasProductionCountry && renderProduction('Country', (\r\n          <Typography variant=\"body2\">\r\n            {enumerate(productionCountries.map(e => `${e.name} (${e.iso_3166_1})`))}\r\n          </Typography>\r\n        ))}\r\n        {hasSpokenLanguages && renderProduction('Spoken Languages', (\r\n          <Typography variant=\"body2\">\r\n            {enumerate(spokenLanguages.map(e => `${e.english_name} (${e.iso_639_1})`))}\r\n          </Typography>\r\n        ))}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieProduction;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ItemCardHorizontalList from '../../common/item/ItemCardHorizontalList';\r\n\r\nconst MovieRecommendations = ({ anchorId }) => {\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    original_title: originalTitle,\r\n    title,\r\n    recommendations,\r\n  } = movie;\r\n\r\n  if (!recommendations) return null;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      anchorId={anchorId}\r\n      appbarTitle={[title || originalTitle, 'Recommendations']}\r\n      areRecommendations\r\n      items={recommendations}\r\n      overview={`If you liked ${title || originalTitle}, check out these other movies:`}\r\n    />\r\n  );\r\n};\r\n\r\nMovieRecommendations.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default MovieRecommendations;\r\n","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Grid } from '@material-ui/core';\n\nimport ItemReview from '../../common/item/ItemReview';\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\n\nimport { scrollToID } from '../../../utils/functions';\n\nconst SECTION_ID = 'reviews';\n\nconst MovieReviews = () => {\n  const movie = useSelector((state) => state.movies.movie);\n\n  const {\n    original_title: originalTitle,\n    reviews,\n    title,\n  } = movie;\n\n  if (!reviews) return null;\n\n  const reviewsUI = reviews.map((review, index) => {\n    const {\n      author,\n      author_details,\n      created_at: date,\n      content,\n    } = review;\n\n    const { rating } = author_details;\n\n    return (\n      <ItemReview\n        author={author}\n        content={content}\n        date={date}\n        rating={rating}\n        divider={index !== 0}\n      />\n    );\n  });\n\n  return (\n    <Grid container>\n      <ItemSeeMore\n        appbarTitle={[title || originalTitle, 'Reviews']}\n        collapsedClickEvent={() => scrollToID('movie-reviews')}\n        collapsedContent={reviewsUI[0]}\n        expandedContent={reviewsUI}\n        isButtonShown={reviews.length > 1}\n        isEpisode\n        sectionId={SECTION_ID}\n        seeMoreText={`Show all ${reviews.length} reviews`}\n      />\n    </Grid>\n  );\n};\n\nexport default MovieReviews;\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport moment from 'moment';\r\nimport ReactPlayer from 'react-player';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { usePath } from '../hooks';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ComponentLoader from '../components/common/ComponentLoader';\r\nimport ItemFooter from '../components/common/item/ItemFooter';\r\nimport MovieBudget from '../components/movie/MovieDetails/MovieBudget';\r\nimport MovieCast from '../components/movie/MovieDetails/MovieCast';\r\nimport MovieCollection from '../components/movie/MovieDetails/MovieCollection';\r\nimport MovieCrew from '../components/movie/MovieDetails/MovieCrew';\r\nimport MovieHeader from '../components/movie/MovieDetails/MovieHeader';\r\nimport MovieProduction from '../components/movie/MovieDetails/MovieProduction';\r\nimport MovieRecommendations from '../components/movie/MovieDetails/MovieRecommendations';\r\nimport MovieReviews from '../components/movie/MovieDetails/MovieReviews';\r\nimport Note from '../components/common/Note';\r\nimport ScrollToTop from '../components/common/ScrollToTop';\r\nimport Section from '../components/common/item/detail/Section';\r\n\r\nimport { getMovieDetails } from '../api';\r\n\r\nimport { moviesActions } from '../reducers/ducks';\r\n\r\nimport {\r\n  NOTE_NO_SELECTED_MOVIE,\r\n  NOTE_MOVIE_NOT_FOUND,\r\n} from '../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  trailer: {\r\n    [theme.breakpoints.only('xs')]: {\r\n      height: `${theme.spacing(24)}px !important`,\r\n    },\r\n    [theme.breakpoints.only('sm')]: {\r\n      height: `${theme.spacing(35)}px !important`,\r\n    },\r\n    [theme.breakpoints.between('sm', 'md')]: {\r\n      height: `${theme.spacing(45)}px !important`,\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      height: `${theme.spacing(60)}px !important`,\r\n    },\r\n  },\r\n  note: {\r\n    padding: theme.spacing(16, 2),\r\n  },\r\n}));\r\n\r\nconst Movies = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const classes = useStyles();\r\n\r\n  const itemDrawerOpen = useSelector((state) => state.sidebar.itemDrawerOpen);\r\n  const movie = useSelector((state) => state.movies.movie);\r\n  const isMovieLoading = useSelector((state) => state.movies.isMovieLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const [isLoaded, setIsLoaded] = useState(true);\r\n\r\n  const [, movieId] = usePath();\r\n\r\n  const {\r\n    belongs_to_collection: belongsToCollection,\r\n    budget,\r\n    cast,\r\n    collection_content: collectionContent,\r\n    crew,\r\n    original_title: originalTitle,\r\n    production_companies: productionCompanies,\r\n    recommendations,\r\n    release_date: releaseDate,\r\n    revenue,\r\n    reviews,\r\n    title,\r\n    tmdb,\r\n    youtube,\r\n  } = movie;\r\n\r\n  const sectionVisibility = {\r\n    trailer: youtube && youtube.length > 0,\r\n    cast: cast && cast.length > 0,\r\n    crew: crew && crew.length > 0,\r\n    production: productionCompanies && productionCompanies.length > 0,\r\n    collection: belongsToCollection && Object.keys(belongsToCollection).length > 0,\r\n    recommendations: recommendations && recommendations.length > 0,\r\n    reviews: reviews && reviews.length > 0,\r\n  };\r\n  const hasStatistics = !Number.isNaN(budget)\r\n    && !Number.isNaN(revenue)\r\n    && (budget !== 0 && revenue !== 0);\r\n\r\n  useEffect(() => {\r\n    if (movieId === 'search') return;\r\n\r\n    if (movieId) {\r\n      const parmesanio = process.env.REACT_APP_TMDB_PARMESANIO;\r\n\r\n      getMovieDetails(parmesanio, movieId, (response) => {\r\n        dispatch(moviesActions.setActiveMovie(response));\r\n        dispatch(moviesActions.setDetailsLoading(false));\r\n        setIsLoaded(true);\r\n      }, (error) => {\r\n        if (error.response) {\r\n          dispatch(moviesActions.setActiveMovie({}));\r\n          setIsLoaded(error.response.data.status_code);\r\n        }\r\n      });\r\n    }\r\n  }, [movieId, dispatch]);\r\n\r\n  if (movieId === undefined || movieId === 'search') {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_NO_SELECTED_MOVIE} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isMovieLoading) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  if (isLoaded === 34) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_MOVIE_NOT_FOUND} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(movie).length === 0 && movie.constructor === Object) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={isMobile ? 4 : 8} className={classes.root}>\r\n        <Section\r\n          anchorId=\"movie-header\"\r\n          divider={!hasStatistics}\r\n          isCollapsible={false}\r\n          visible={Object.keys(movie).length !== 0 && movie.constructor === Object}\r\n        >\r\n          <MovieHeader sectionVisibility={sectionVisibility} />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-budget\"\r\n          isCollapsible={false}\r\n          visible={hasStatistics}\r\n        >\r\n          <MovieBudget />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-trailer\"\r\n          title=\"Trailer\"\r\n          visible={sectionVisibility.trailer}\r\n        >\r\n          <ReactPlayer\r\n            className={classes.trailer}\r\n            controls\r\n            light\r\n            pip\r\n            url={youtube}\r\n            width=\"100%\"\r\n          />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-cast\"\r\n          title=\"Cast\"\r\n          visible={sectionVisibility.cast}\r\n        >\r\n          <MovieCast />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-crew\"\r\n          title=\"Crew\"\r\n          visible={sectionVisibility.crew}\r\n        >\r\n          <MovieCrew />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-production\"\r\n          divider\r\n          title=\"Production\"\r\n          visible={sectionVisibility.production}\r\n        >\r\n          <MovieProduction />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-reviews\"\r\n          divider\r\n          title=\"Reviews\"\r\n          visible={sectionVisibility.reviews}\r\n        >\r\n          <MovieReviews />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-collection\"\r\n          title={collectionContent ? collectionContent.name : ''}\r\n          visible={sectionVisibility.collection}\r\n        >\r\n          <MovieCollection anchorId=\"movie-collection\" />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-recommendations\"\r\n          title=\"Recommendations\"\r\n          visible={sectionVisibility.recommendations}\r\n        >\r\n          <MovieRecommendations anchorId=\"movie-recommendations\" />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-end-credits\"\r\n          divider={false}\r\n        >\r\n          <ItemFooter\r\n            companies={productionCompanies.map((e) => e.name)}\r\n            link={tmdb}\r\n            title={title || originalTitle}\r\n            year={releaseDate ? moment(releaseDate).format('YYYY') : ''}\r\n          />\r\n        </Section>\r\n      </Grid>\r\n      {!itemDrawerOpen && <ScrollToTop />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"sourceRoot":""}