{"version":3,"sources":["../node_modules/@material-ui/lab/node_modules/react-is/index.js","../node_modules/@material-ui/lab/node_modules/react-is/cjs/react-is.production.min.js","components/tvShow/TVShowDetails/TVShowCast.js","../node_modules/@material-ui/lab/esm/AvatarGroup/AvatarGroup.js","components/tvShow/TVShowDetails/TVShowEpisode.js","components/tvShow/TVShowDetails/TVShowEpisodes.js","components/tvShow/TVShowDetails/TVShowHeader.js","components/tvShow/TVShowDetails/TVShowProduction.js","components/tvShow/TVShowDetails/TVShowRecommendations.js","components/tvShow/TVShowDetails/TVShowReviews.js","components/tvShow/TVShowDetails/TVShowSeasonDetails.js","components/tvShow/TVShowDetails/TVShowSeasonList.js","containers/TVShows.js"],"names":["module","exports","require","b","c","d","e","f","g","h","k","l","m","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","type","z","A","B","C","D","E","F","G","H","I","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","useStyles","makeStyles","theme","_container","container","_defineProperty","breakpoints","only","margin","spacing","horizontalScrollItemSpacing","lastEntry","padding","TVShowCast","classes","useTheme","isMobile","useMediaQuery","isSmallTablet","isBigTablet","isDesktop","up","tvShow","useSelector","state","tvShows","history","useHistory","_useState","useState","_useState2","_slicedToArray","cardCol","setCardCol","cast","name","originalName","original_name","useEffect","getCastCol","React","createElement","Grid","className","ItemSeeMore","appbarTitle","collapsedClickEvent","scrollToID","collapsedContent","ItemHorizontalContainer","handleSeeMore","push","concat","location","pathname","isWithSeeMore","length","maxCount","scrollAmount","slice","map","item","key","id","PersonAvatar","character","col","image","profile_path","isHorizontalScroll","expandedContent","ItemLazyLoad","contents","maxItemPerLoad","node","otherProps","isButtonShown","sectionId","seeMoreText","SPACINGS","small","medium","AvatarGroup","props","ref","childrenProp","children","_props$max","max","_props$spacing","other","_objectWithoutProperties","clampedMax","toArray","filter","child","extraAvatars","marginLeft","undefined","_extends","clsx","root","index","avatar","style","zIndex","Avatar","withStyles","display","border","palette","background","default","gridItem","marginBottom","maxWidth","position","dividerContainer","paddingTop","paddingBottom","brokenImage","borderRadius","shape","height","objectFit","objectPosition","width","brokenImageContainer","alignItems","justifyContent","chip","titleContainer","top","typographyContainer","bottom","outlinedText","backgroundColor","color","titleHeight","lineHeight","dateHeight","fontWeight","renderCrew","crew","label","xs","Typography","variant","TVShowEpisode","_ref","episode","isCollapsed","isLastItem","_usePath","usePath","section","isSectionActive","maxGuestsToShow","airDate","air_date","episodeNumber","episode_number","guestStars","guest_stars","episodeName","overview","stillPath","still_path","episodeImagePath","TMDB_IMAGE_PREFIX","_crew$filter","job","director","_crew$filter3","writer","sectionActiveGridSize","direction","md","sm","alt","src","BrokenImage","extraClass","Box","title","subtitle","moment","format","NO_DATE_TEXT","Chip","diff","Object","keys","guest","i","profilePath","guestImagePath","Tooltip","arrow","enterTouchDelay","leaveTouchDelay","placement","toLowerCase","Divider","defaultProps","TVShowEpisodes","episodes","isSeasonLoading","isTVShowLoading","selectedSeason","maxEpisodesToShow","filteredEpisodes","renderEpisodeList","episodesToDisplay","hideLoader","ComponentLoader","isEpisode","releaseYear","text","secondary","fontSize","typography","h4","fontWeightLight","h5","posterImage","colorScheme","divider","TVShowHeader","sectionVisibility","isImageLoaded","setIsImageLoaded","facebook","genres","imdb","instagram","numberOfEpisodes","number_of_episodes","numberOfSeasons","number_of_seasons","posterPath","poster_path","status","tagline","tmdb","twitter","hasImage","breadcrumbs","TV_SHOW_BREADCRUMBS_CONFIG","visibilityId","onLoad","getTVShowStatus","ItemLinks","ItemBreadcrumbs","content","justify","Statistic","count","TVShowProduction","createdBy","created_by","networks","productionCompanies","production_companies","productionCountries","production_countries","spokenLanguages","spoken_languages","totalEpisodes","totalSeasons","hasCreatedBy","hasNetworks","hasProductionCompany","hasProductionCountry","hasSpokenLanguages","hasTotalEpisodes","hasTotalSeasons","renderProduction","items","arguments","gutterBottom","renderProductionList","primary","punctuation","person","ProductionChip","network","logoPath","logo_path","originCountry","origin_country","country","company","iso_3166_1","english_name","iso_639_1","TVShowRecommendations","anchorId","recommendations","ItemCardHorizontalList","areRecommendations","TVShowReviews","reviews","reviewsUI","review","author","author_details","date","created_at","rating","ItemReview","TVShowSeasonDetails","seasons","_selectSeason","selectSeason","seasonName","emphasis","cursor","marginRight","activeSeason","textDecoration","activeImage","TVShowSeasonList","dispatch","useDispatch","showName","imageSize","season","seasonNumber","season_number","isActive","imagePath","onClick","getTVShowSeasonDetails","process","response","tvShowsActions","setEpisode","setSelectedSeason","handleCardClick","renderTitle","note","TVShows","itemDrawerOpen","sidebar","isSearchOpen","isLoaded","setIsLoaded","tvShowId","firstAirDate","first_air_date","production","seasonList","parmesanio","getTVShowDetails","tvShowResponse","fetchedSeason","latestSeason","sort","find","episodeResponse","setActiveTVShow","error","data","status_code","setDetailsLoading","Note","details","NOTE_NO_SELECTED_TV_SHOW","NOTE_TV_SHOW_NOT_FOUND","constructor","NOTE_SEARCH","ErrorBoundary","Section","isCollapsible","visible","ItemFooter","companies","link","year","ScrollToTop"],"mappings":"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","file":"static/js/3.9df9ada7.chunk.js","sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Grid, useMediaQuery } from \"@material-ui/core\";\r\n\r\nimport ItemHorizontalContainer from \"../../common/item/ItemHorizontalContainer\";\r\nimport ItemLazyLoad from \"../../common/item/ItemLazyLoad\";\r\nimport ItemSeeMore from \"../../common/item/ItemSeeMore\";\r\nimport PersonAvatar from \"../../common/item/detail/PersonAvatar\";\r\n\r\nimport { getCastCol, scrollToID } from \"../../../utils/functions\";\r\n\r\nimport { MAX_CAST_HORIZONTAL_ITEMS as maxCount } from \"../../../constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    [theme.breakpoints.only(\"xs\")]: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n    position: \"relative\",\r\n    width: \"inherit\",\r\n  },\r\n  horizontalScrollItemSpacing: {\r\n    margin: theme.spacing(0, 1),\r\n  },\r\n  lastEntry: {\r\n    padding: theme.spacing(1.5),\r\n  },\r\n}));\r\n\r\nconst SECTION_ID = \"cast\";\r\n\r\nconst TVShowCast = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only(\"sm\"));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only(\"md\"));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const history = useHistory();\r\n\r\n  const [cardCol, setCardCol] = useState(0);\r\n\r\n  const { cast, name, original_name: originalName } = tvShow;\r\n\r\n  useEffect(() => {\r\n    setCardCol(getCastCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  const handleSeeMore = () => {\r\n    history.push(`${history.location.pathname}/${SECTION_ID}`);\r\n  };\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <ItemSeeMore\r\n        appbarTitle={[name || originalName, \"Cast\"]}\r\n        collapsedClickEvent={() => scrollToID(\"tvshow-cast\")}\r\n        collapsedContent={\r\n          <ItemHorizontalContainer\r\n            handleSeeMore={handleSeeMore}\r\n            isWithSeeMore={cast.length > maxCount}\r\n            scrollAmount={144}\r\n          >\r\n            {cast.slice(0, maxCount).map((item) => (\r\n              <div\r\n                className={classes.horizontalScrollItemSpacing}\r\n                key={`tv-show-cast-person-avatar-${item.id}`}\r\n              >\r\n                <PersonAvatar\r\n                  character={item.character}\r\n                  col={12}\r\n                  image={item.profile_path}\r\n                  name={item.name}\r\n                  isHorizontalScroll\r\n                />\r\n              </div>\r\n            ))}\r\n            {cast.length <= maxCount && isMobile && (\r\n              <div className={classes.lastEntry} />\r\n            )}\r\n          </ItemHorizontalContainer>\r\n        }\r\n        expandedContent={\r\n          <Grid container spacing={2}>\r\n            <ItemLazyLoad\r\n              contents={cast}\r\n              maxItemPerLoad={20}\r\n              node={<PersonAvatar />}\r\n              otherProps={{ col: 12 / cardCol }}\r\n              type=\"itemCast\"\r\n            />\r\n          </Grid>\r\n        }\r\n        isButtonShown={cast.length > maxCount}\r\n        sectionId={SECTION_ID}\r\n        seeMoreText={`Show all ${cast.length} cast`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowCast;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { chainPropTypes } from '@material-ui/utils';\nvar SPACINGS = {\n  small: -16,\n  medium: null\n};\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8,\n      '&:first-child': {\n        marginLeft: 0\n      }\n    }\n  };\n};\nvar AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 5 : _props$max,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'medium' : _props$spacing,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"max\", \"spacing\"]);\n\n  var clampedMax = max < 2 ? 2 : max;\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  var extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  var marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.slice(0, children.length - extraAvatars).map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        zIndex: children.length - index,\n        marginLeft: index === 0 ? undefined : marginLeft\n      }, child.props.style)\n    });\n  }), extraAvatars ? /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    style: {\n      zIndex: 0,\n      marginLeft: marginLeft\n    }\n  }, \"+\", extraAvatars) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   */\n  max: chainPropTypes(PropTypes.number, function (props) {\n    if (props.max < 2) {\n      throw new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\\n'));\n    }\n  }),\n\n  /**\n   * Spacing between avatars.\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport clsx from \"clsx\";\r\nimport moment from \"moment\";\r\nimport { usePath } from \"../../../hooks\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n  Grid,\r\n  Tooltip,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"../../custom/base/Typography\";\r\nimport Chip from \"../../custom/base/Chip\";\r\nimport { AvatarGroup } from \"@material-ui/lab\";\r\n\r\nimport BrokenImage from \"../../common/BrokenImage\";\r\n\r\nimport { TMDB_IMAGE_PREFIX, NO_DATE_TEXT } from \"../../../constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridItem: {\r\n    marginBottom: theme.spacing(1),\r\n    maxWidth: \"100%\",\r\n    position: \"relative\",\r\n  },\r\n  dividerContainer: {\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(2),\r\n    [theme.breakpoints.only(\"xs\")]: {\r\n      paddingTop: theme.spacing(4),\r\n    },\r\n  },\r\n  image: {\r\n    filter: `brightness(${theme.palette.type === \"dark\" ? \"70%\" : \"90%\"})`,\r\n    border: `1px solid ${theme.palette.brokenImage.border}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    height: theme.spacing(25),\r\n    objectFit: \"cover\",\r\n    objectPosition: \"50% 0%\",\r\n    width: \"100%\",\r\n  },\r\n  brokenImageContainer: {\r\n    alignItems: \"center\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginBottom: theme.spacing(0.5),\r\n    padding: theme.spacing(1),\r\n  },\r\n  avatar: {\r\n    border: `1px solid ${theme.palette.brokenImage.border}`,\r\n    height: theme.spacing(4),\r\n    width: theme.spacing(4),\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.25, 0.5, 0.25, 0),\r\n  },\r\n  titleContainer: {\r\n    top: 0,\r\n    zIndex: 1,\r\n    height: theme.spacing(25),\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  typographyContainer: {\r\n    bottom: theme.spacing(2),\r\n    position: \"absolute\",\r\n    width: `calc(100% - ${theme.spacing(4)}px)`,\r\n  },\r\n  outlinedText: {\r\n    backgroundColor: theme.palette.outlinedText.background,\r\n    color: theme.palette.outlinedText.color,\r\n    padding: theme.spacing(0.5, 0),\r\n  },\r\n  titleHeight: {\r\n    lineHeight: \"28px\",\r\n  },\r\n  dateHeight: {\r\n    lineHeight: \"22px\",\r\n    fontWeight: 200,\r\n  },\r\n}));\r\n\r\nconst renderCrew = (crew, label) =>\r\n  crew && (\r\n    <Grid item xs={6}>\r\n      <Typography color=\"textSecondary\" variant=\"caption\">\r\n        {label}\r\n      </Typography>\r\n      <Typography variant=\"body2\">{crew.name || crew.original_name}</Typography>\r\n    </Grid>\r\n  );\r\n\r\nconst TVShowEpisode = ({ episode, isCollapsed, isLastItem }) => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only(\"md\"));\r\n  const classes = useStyles();\r\n\r\n  const [, , section] = usePath();\r\n  const isSectionActive = section && section.length !== 0;\r\n\r\n  const maxGuestsToShow = isSmallTablet ? 12 : 10;\r\n\r\n  const {\r\n    air_date: airDate,\r\n    crew,\r\n    episode_number: episodeNumber,\r\n    guest_stars: guestStars,\r\n    name,\r\n    name: episodeName,\r\n    original_name: originalName,\r\n    overview,\r\n    still_path: stillPath,\r\n  } = episode;\r\n\r\n  if (!airDate) return null;\r\n\r\n  let episodeImagePath = TMDB_IMAGE_PREFIX;\r\n  if (stillPath) episodeImagePath += `/w780${stillPath}`;\r\n\r\n  const [director] = crew.filter((e) => e.job === \"Director\");\r\n  const [writer] = crew.filter((e) => e.job === \"Writer\");\r\n  const sectionActiveGridSize = isSectionActive ? 12 : 6;\r\n\r\n  const getEpisodeStatus = () =>\r\n    moment(airDate).diff(moment()) > 0 ? \"Coming Soon\" : \"Aired\";\r\n\r\n  const renderTitle = () => {\r\n    return (\r\n      <Box className={classes.titleContainer}>\r\n        <Box className={classes.typographyContainer}>\r\n          <Typography\r\n            className={clsx(classes.title, classes.titleHeight)}\r\n            variant=\"body1\"\r\n          >\r\n            <span className={clsx(classes.outlinedText, classes.titleHeight)}>\r\n              {`${episodeNumber} · ${episodeName}`}\r\n            </span>\r\n          </Typography>\r\n          {airDate && (\r\n            <Typography className={classes.subtitle} variant=\"caption\">\r\n              <span className={clsx(classes.outlinedText, classes.dateHeight)}>\r\n                {airDate ? moment(airDate).format(\"MMM D, YYYY\") : NO_DATE_TEXT}\r\n              </span>\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      item\r\n      md={isCollapsed ? 6 : sectionActiveGridSize}\r\n      sm={isCollapsed ? 6 : sectionActiveGridSize}\r\n      xs={12}\r\n    >\r\n      <Grid item className={classes.gridItem}>\r\n        {stillPath ? (\r\n          <img\r\n            className={classes.image}\r\n            alt={`${\r\n              name || originalName\r\n            } Episode ${episodeNumber} ${episodeName}'s stills.`}\r\n            src={episodeImagePath}\r\n          />\r\n        ) : (\r\n          <BrokenImage\r\n            type=\"baseImage\"\r\n            extraClass={`${classes.image} ${classes.brokenImageContainer}`}\r\n          />\r\n        )}\r\n        {renderTitle()}\r\n      </Grid>\r\n      <Grid item className={classes.gridItem} container>\r\n        <Chip\r\n          className={classes.chip}\r\n          label={getEpisodeStatus()}\r\n          variant=\"outlined\"\r\n        />\r\n      </Grid>\r\n      {overview.length > 0 && (\r\n        <Grid item className={classes.gridItem}>\r\n          <Typography variant=\"body2\">{overview}</Typography>\r\n        </Grid>\r\n      )}\r\n      {director &&\r\n        Object.keys(director).length > 0 &&\r\n        writer &&\r\n        Object.keys(writer).length > 0 && (\r\n          <Grid item className={classes.gridItem} container>\r\n            {renderCrew(director, \"Director\")}\r\n            {renderCrew(writer, \"Writer\")}\r\n          </Grid>\r\n        )}\r\n      {guestStars.length > 0 && (\r\n        <Grid item className={classes.gridItem}>\r\n          <Typography color=\"textSecondary\" variant=\"caption\">\r\n            Guests\r\n          </Typography>\r\n          <AvatarGroup max={maxGuestsToShow}>\r\n            {guestStars.map((guest, i) => {\r\n              const { id, profile_path: profilePath } = guest;\r\n\r\n              let guestImagePath = TMDB_IMAGE_PREFIX;\r\n              if (stillPath) guestImagePath += `/w45${profilePath}`;\r\n\r\n              if (i < maxGuestsToShow) {\r\n                return (\r\n                  <Tooltip\r\n                    arrow\r\n                    enterTouchDelay={50}\r\n                    key={`tv-show-episode-avatar-group-${id}`}\r\n                    leaveTouchDelay={3000}\r\n                    placement=\"top\"\r\n                    title={`${guest.name} as ${guest.character}`.toLowerCase()}\r\n                  >\r\n                    <Avatar className={classes.avatar} src={guestImagePath} />\r\n                  </Tooltip>\r\n                );\r\n              }\r\n\r\n              return null;\r\n            })}\r\n          </AvatarGroup>\r\n        </Grid>\r\n      )}\r\n      {!isCollapsed && (isMobile || isSectionActive) && isLastItem && (\r\n        <Grid item className={classes.dividerContainer}>\r\n          <Divider />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nTVShowEpisode.defaultProps = {\r\n  episode: {\r\n    air_date: \"\",\r\n    crew: [],\r\n    episode_number: 0,\r\n    guest_stars: [],\r\n    name: \"\",\r\n    overview: \"\",\r\n    still_path: \"\",\r\n  },\r\n  isCollapsed: false,\r\n  isLastItem: false,\r\n};\r\n\r\nTVShowEpisode.propTypes = {\r\n  episode: PropTypes.shape({\r\n    air_date: PropTypes.string,\r\n    crew: PropTypes.arrayOf(PropTypes.shape()),\r\n    episode_number: PropTypes.number,\r\n    guest_stars: PropTypes.arrayOf(PropTypes.shape()),\r\n    name: PropTypes.string,\r\n    overview: PropTypes.string,\r\n    still_path: PropTypes.string,\r\n  }),\r\n  isCollapsed: PropTypes.bool,\r\n  isLastItem: PropTypes.bool,\r\n};\r\n\r\nexport default TVShowEpisode;\r\n","import React from \"react\";\r\n\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { Grid, useMediaQuery } from \"@material-ui/core\";\r\n\r\nimport ComponentLoader from \"../../common/ComponentLoader\";\r\nimport ItemLazyLoad from \"../../common/item/ItemLazyLoad\";\r\nimport ItemSeeMore from \"../../common/item/ItemSeeMore\";\r\n\r\nimport { scrollToID } from \"../../../utils/functions\";\r\n\r\nimport TVShowEpisode from \"./TVShowEpisode\";\r\n\r\nconst TVShowEpisodes = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n\r\n  const episodes = useSelector((state) => state.tvShows.episodes);\r\n  const isSeasonLoading = useSelector((state) => state.tvShows.isSeasonLoading);\r\n  const isTVShowLoading = useSelector((state) => state.tvShows.isTVShowLoading);\r\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const { name, original_name: originalName } = tvShow;\r\n\r\n  const maxEpisodesToShow = isMobile ? 1 : 2;\r\n  const filteredEpisodes = episodes.filter(\r\n    (e) =>\r\n      (e.air_date !== null && e.air_date.length > 0) ||\r\n      moment(e.air_date).diff(moment()) < 0\r\n  );\r\n\r\n  const renderEpisodeList = (episodesToDisplay, isCollapsed) => (\r\n    <Grid container spacing={isMobile ? 3 : 2}>\r\n      <ItemLazyLoad\r\n        contents={episodesToDisplay}\r\n        hideLoader={isCollapsed}\r\n        node={<TVShowEpisode />}\r\n        otherProps={{ isCollapsed }}\r\n        type=\"tvShowEpisode\"\r\n      />\r\n    </Grid>\r\n  );\r\n\r\n  if (isSeasonLoading || isTVShowLoading) {\r\n    return (\r\n      <ComponentLoader\r\n        label={`Getting episodes from Season ${selectedSeason}...`}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ItemSeeMore\r\n      appbarTitle={[name || originalName, `Season ${selectedSeason} Episodes`]}\r\n      collapsedClickEvent={() => scrollToID(\"tvshow-episodes\")}\r\n      collapsedContent={renderEpisodeList(\r\n        filteredEpisodes.slice(0, maxEpisodesToShow),\r\n        true\r\n      )}\r\n      expandedContent={renderEpisodeList(filteredEpisodes, false)}\r\n      isButtonShown={filteredEpisodes.length > maxEpisodesToShow}\r\n      isEpisode\r\n      maxWidth=\"sm\"\r\n      sectionId=\"episodes\"\r\n      seeMoreText={`Show all ${filteredEpisodes.length} episodes`}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TVShowEpisodes;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Grid, useMediaQuery } from \"@material-ui/core\";\r\nimport Chip from \"../../custom/base/Chip\";\r\nimport Typography from \"../../custom/base/Typography\";\r\n\r\nimport ItemBreadcrumbs from \"../../common/item/ItemBreadcrumbs\";\r\nimport ItemLinks from \"../../common/item/ItemLinks\";\r\nimport Statistic from \"../../common/item/detail/Statistic\";\r\n\r\nimport { getTVShowStatus } from \"../../../utils/functions\";\r\n\r\nimport {\r\n  TV_SHOW_BREADCRUMBS_CONFIG,\r\n  TMDB_IMAGE_PREFIX,\r\n} from \"../../../constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 600,\r\n  },\r\n  subtitle: {\r\n    fontWeight: 400,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.25, 0.5, 0.25, 0),\r\n  },\r\n  releaseYear: {\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.h4.fontSize,\r\n    fontWeight: theme.typography.fontWeightLight,\r\n    marginLeft: theme.spacing(2),\r\n    [theme.breakpoints.only(\"xs\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      fontSize: theme.typography.h5.fontSize,\r\n    },\r\n  },\r\n  posterImage: {\r\n    filter: `brightness(${theme.palette.type === \"dark\" ? \"70%\" : \"90%\"})`,\r\n    border: `1px solid ${theme.palette.colorScheme.divider}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    height: \"355px\",\r\n    margin: theme.spacing(1),\r\n    width: \"250px\",\r\n    objectFit: \"cover\",\r\n    objectPosition: \"50% 0%\",\r\n  },\r\n  container: {\r\n    height: \"fit-content\",\r\n  },\r\n}));\r\n\r\nconst TVShowHeader = ({ sectionVisibility }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\r\n\r\n  const {\r\n    facebook,\r\n    genres,\r\n    imdb,\r\n    instagram,\r\n    name,\r\n    number_of_episodes: numberOfEpisodes,\r\n    number_of_seasons: numberOfSeasons,\r\n    original_name: originalName,\r\n    overview,\r\n    poster_path: posterPath,\r\n    status,\r\n    tagline,\r\n    tmdb,\r\n    twitter,\r\n  } = tvShow;\r\n\r\n  const hasImage = isDesktop && posterPath;\r\n\r\n  const breadcrumbs = TV_SHOW_BREADCRUMBS_CONFIG.filter(\r\n    (e) => sectionVisibility[e.visibilityId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setIsImageLoaded(false);\r\n  }, [posterPath]);\r\n\r\n  return (\r\n    <>\r\n      {hasImage && (\r\n        <Grid item xs={4} container spacing={2}>\r\n          <img\r\n            src={`${TMDB_IMAGE_PREFIX}/w500${posterPath}`}\r\n            alt={`${name || originalName}'s background cover.`}\r\n            className={classes.posterImage}\r\n            style={isImageLoaded ? {} : { display: \"none\" }}\r\n            onLoad={() => setIsImageLoaded(true)}\r\n          />\r\n        </Grid>\r\n      )}\r\n      <Grid\r\n        item\r\n        xs={hasImage ? 8 : 12}\r\n        container\r\n        spacing={2}\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-start\"\r\n        className={classes.container}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Chip\r\n            className={classes.chip}\r\n            label={getTVShowStatus(status)}\r\n            variant=\"outlined\"\r\n          />\r\n          {genres.map((i) => (\r\n            <Chip\r\n              key={`tv-show-header-chip-${i.id}`}\r\n              className={classes.chip}\r\n              label={i.name}\r\n              variant=\"outlined\"\r\n            />\r\n          ))}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ItemLinks\r\n            facebook={facebook}\r\n            imdb={imdb}\r\n            instagram={instagram}\r\n            tmdb={tmdb}\r\n            twitter={twitter}\r\n          />\r\n        </Grid>\r\n        {overview && overview.length > 0 && (\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"body2\">{overview}</Typography>\r\n          </Grid>\r\n        )}\r\n        {tagline && (\r\n          <Grid item xs={12}>\r\n            <Typography\r\n              color=\"textSecondary\"\r\n              variant=\"body2\"\r\n              className={classes.tagline}\r\n            >\r\n              <em>\"{tagline}\"</em>\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n        <Grid item xs={12}>\r\n          <ItemBreadcrumbs content={breadcrumbs} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Grid item container justify=\"center\" alignItems=\"center\">\r\n            <Statistic\r\n              col={6}\r\n              count={numberOfSeasons}\r\n              label=\"Seasons\"\r\n              divider\r\n            />\r\n            <Statistic col={6} count={numberOfEpisodes} label=\"Episodes\" />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nTVShowHeader.propTypes = {\r\n  sectionVisibility: PropTypes.shape({\r\n    cast: PropTypes.bool.isRequired,\r\n    episodes: PropTypes.bool.isRequired,\r\n    production: PropTypes.bool.isRequired,\r\n    recommendations: PropTypes.bool.isRequired,\r\n    seasonList: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default TVShowHeader;\r\n","import React from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Grid, useMediaQuery } from \"@material-ui/core\";\r\nimport Typography from \"../../custom/base/Typography\";\r\n\r\nimport ProductionChip from \"../../common/item/detail/ProductionChip\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    width: \"100%\",\r\n  },\r\n  name: {\r\n    fontWeight: 600,\r\n  },\r\n}));\r\n\r\nconst TVShowProduction = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n  const classes = useStyles();\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const {\r\n    created_by: createdBy,\r\n    networks,\r\n    production_companies: productionCompanies,\r\n    production_countries: productionCountries,\r\n    spoken_languages: spokenLanguages,\r\n    number_of_episodes: totalEpisodes,\r\n    number_of_seasons: totalSeasons,\r\n  } = tvShow;\r\n\r\n  const hasCreatedBy = createdBy && createdBy.length > 0;\r\n  const hasNetworks = networks && networks.length > 0;\r\n  const hasProductionCompany =\r\n    productionCompanies && productionCompanies.length > 0;\r\n  const hasProductionCountry =\r\n    productionCountries && productionCountries.length > 0;\r\n  const hasSpokenLanguages = spokenLanguages && spokenLanguages.length > 0;\r\n  const hasTotalEpisodes = totalEpisodes && totalEpisodes > 0;\r\n  const hasTotalSeasons = totalSeasons && totalSeasons > 0;\r\n\r\n  const renderProduction = (title, items, xs = isMobile ? 12 : 6) => (\r\n    <Grid item xs={xs} container>\r\n      <Typography\r\n        variant=\"body2\"\r\n        gutterBottom\r\n        className={classes.title}\r\n        color=\"textSecondary\"\r\n      >\r\n        {title}\r\n      </Typography>\r\n      {items}\r\n    </Grid>\r\n  );\r\n\r\n  const renderProductionList = (primary, secondary, index, length) => {\r\n    let punctuation = \"\";\r\n\r\n    if (index === 0 && length === 1) {\r\n      // only 1 entry\r\n      punctuation = \"\";\r\n    } else if (index === length - 2) {\r\n      // entry before last #oxfordComma\r\n      punctuation = \", and \";\r\n    } else if (index < length - 1) {\r\n      // mid entry\r\n      punctuation = \", \";\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <span className={classes.name}>{primary}</span> ({secondary})\r\n        {punctuation}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid item container>\r\n      <Grid\r\n        alignItems=\"flex-start\"\r\n        container\r\n        direction=\"row\"\r\n        item\r\n        justify=\"flex-start\"\r\n        spacing={3}\r\n        xs={12}\r\n      >\r\n        {hasCreatedBy &&\r\n          renderProduction(\r\n            \"Created by\",\r\n            createdBy.map((person) => {\r\n              const { id, name, profile_path: profilePath } = person;\r\n\r\n              return (\r\n                <Grid item key={`tv-show-production-created-by-chip-${id}`}>\r\n                  <ProductionChip image={profilePath} name={name} />\r\n                </Grid>\r\n              );\r\n            })\r\n          )}\r\n        {hasNetworks &&\r\n          renderProduction(\r\n            \"Network\",\r\n            networks.map((network) => {\r\n              const {\r\n                id,\r\n                logo_path: logoPath,\r\n                name,\r\n                origin_country: originCountry,\r\n              } = network;\r\n\r\n              return (\r\n                <Grid item key={`tv-show-production-network-chip-${id}`}>\r\n                  <ProductionChip\r\n                    country={originCountry}\r\n                    image={logoPath}\r\n                    name={name}\r\n                  />\r\n                </Grid>\r\n              );\r\n            })\r\n          )}\r\n        {hasProductionCompany &&\r\n          renderProduction(\r\n            \"Companies\",\r\n            productionCompanies.map((company) => {\r\n              const {\r\n                id,\r\n                logo_path: logoPath,\r\n                name,\r\n                origin_country: originCountry,\r\n              } = company;\r\n\r\n              return (\r\n                <Grid\r\n                  item\r\n                  key={`tv-show-production-production-company-chip-${id}`}\r\n                >\r\n                  <ProductionChip\r\n                    country={originCountry}\r\n                    image={logoPath}\r\n                    name={name}\r\n                  />\r\n                </Grid>\r\n              );\r\n            }),\r\n            12\r\n          )}\r\n        {hasTotalSeasons &&\r\n          renderProduction(\r\n            \"Total Season Count\",\r\n            <Typography variant=\"body2\">\r\n              <span className={classes.name}>{totalSeasons}</span> season\r\n              {totalSeasons > 1 ? \"s\" : \"\"}\r\n            </Typography>\r\n          )}\r\n        {hasTotalEpisodes &&\r\n          renderProduction(\r\n            \"Total Episode Count\",\r\n            <Typography variant=\"body2\">\r\n              <span className={classes.name}>{totalEpisodes}</span> episode\r\n              {totalEpisodes > 1 ? \"s\" : \"\"}\r\n            </Typography>\r\n          )}\r\n        {hasProductionCountry &&\r\n          renderProduction(\r\n            \"Country\",\r\n            <Typography variant=\"body2\">\r\n              {productionCountries.map((e, i) =>\r\n                renderProductionList(\r\n                  e.name,\r\n                  e.iso_3166_1,\r\n                  i,\r\n                  productionCountries.length\r\n                )\r\n              )}\r\n            </Typography>\r\n          )}\r\n        {hasSpokenLanguages &&\r\n          renderProduction(\r\n            \"Spoken Languages\",\r\n            <Typography variant=\"body2\">\r\n              {spokenLanguages.map((e, i) =>\r\n                renderProductionList(\r\n                  e.english_name,\r\n                  e.iso_639_1,\r\n                  i,\r\n                  spokenLanguages.length\r\n                )\r\n              )}\r\n            </Typography>\r\n          )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowProduction;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport ItemCardHorizontalList from \"../../common/item/ItemCardHorizontalList\";\r\n\r\nconst TVShowRecommendations = ({ anchorId }) => {\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const { name, original_name: originalName, recommendations } = tvShow;\r\n\r\n  if (!recommendations) return null;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      anchorId={anchorId}\r\n      appbarTitle={[name || originalName, \"Recommendations\"]}\r\n      areRecommendations\r\n      items={recommendations}\r\n      overview={`If you liked ${\r\n        name || originalName\r\n      }, check out these other TV shows:`}\r\n    />\r\n  );\r\n};\r\n\r\nTVShowRecommendations.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TVShowRecommendations;\r\n","import React from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport ItemLazyLoad from \"../../common/item/ItemLazyLoad\";\r\nimport ItemReview from \"../../common/item/ItemReview\";\r\nimport ItemSeeMore from \"../../common/item/ItemSeeMore\";\r\n\r\nimport { scrollToID } from \"../../../utils/functions\";\r\n\r\nconst SECTION_ID = \"reviews\";\r\n\r\nconst TVShowReviews = () => {\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const { name, original_name: originalName, reviews } = tvShow;\r\n\r\n  if (!reviews) return null;\r\n\r\n  const reviewsUI = reviews.map((review, index) => {\r\n    const { author, author_details, created_at: date, content } = review;\r\n\r\n    const { rating } = author_details;\r\n\r\n    return (\r\n      <ItemReview\r\n        author={author}\r\n        content={content}\r\n        date={date}\r\n        rating={rating}\r\n        divider={index !== 0}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Grid container>\r\n      <ItemSeeMore\r\n        appbarTitle={[name || originalName, \"Reviews\"]}\r\n        collapsedClickEvent={() => scrollToID(\"tvshow-reviews\")}\r\n        collapsedContent={reviewsUI[0]}\r\n        expandedContent={\r\n          <ItemLazyLoad\r\n            contents={reviews}\r\n            maxItemPerLoad={5}\r\n            node={<ItemReview />}\r\n            type=\"itemReviews\"\r\n          />\r\n        }\r\n        isButtonShown={reviews.length > 1}\r\n        isEpisode\r\n        sectionId={SECTION_ID}\r\n        seeMoreText={`Show all ${reviews.length} reviews`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowReviews;\r\n","import React from \"react\";\r\n\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Typography from \"../../custom/base/Typography\";\r\n\r\nimport { selectSeason } from \"../../../utils/functions\";\r\n\r\nimport { NO_DATE_TEXT } from \"../../../constants\";\r\n\r\nconst TVShowSeasonDetails = () => {\r\n  const episodes = useSelector((state) => state.tvShows.episodes);\r\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const { seasons } = tvShow;\r\n\r\n  const {\r\n    air_date: airDate,\r\n    name: seasonName,\r\n    overview,\r\n  } = selectSeason(seasons, selectedSeason);\r\n\r\n  const filteredEpisodes = episodes.filter(\r\n    (e) =>\r\n      (e.air_date !== null && e.air_date.length > 0) ||\r\n      moment(e.air_date).diff(moment()) < 0\r\n  ).length;\r\n\r\n  return (\r\n    <Grid item container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h6\">{seasonName}</Typography>\r\n        <Typography color=\"textSecondary\">\r\n          {airDate ? moment(airDate).format(\"MMM D, YYYY\") : NO_DATE_TEXT}\r\n          {filteredEpisodes > 0 && (\r\n            <>\r\n              &nbsp;&nbsp;&middot;&nbsp;&nbsp;\r\n              {`${filteredEpisodes} episode${filteredEpisodes > 1 ? \"s\" : \"\"}`}\r\n            </>\r\n          )}\r\n        </Typography>\r\n      </Grid>\r\n      {overview && (\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"body2\">{overview}</Typography>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowSeasonDetails;\r\n","import React from \"react\";\r\n\r\nimport clsx from \"clsx\";\r\nimport moment from \"moment\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Box, Grid } from \"@material-ui/core\";\r\nimport Typography from \"../../custom/base/Typography\";\r\n\r\nimport BrokenImage from \"../../common/BrokenImage\";\r\nimport ItemHorizontalContainer from \"../../common/item/ItemHorizontalContainer\";\r\n\r\nimport { getTVShowSeasonDetails } from \"../../../api\";\r\n\r\nimport { tvShowsActions } from \"../../../reducers/ducks\";\r\n\r\nimport { TMDB_IMAGE_PREFIX } from \"../../../constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    position: \"relative\",\r\n  },\r\n  image: {\r\n    filter: `brightness(${theme.palette.type === \"dark\" ? \"70%\" : \"90%\"})`,\r\n    border: `1px solid ${theme.palette.brokenImage.border}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    width: \"250px\",\r\n    objectFit: \"cover\",\r\n    objectPosition: \"50% 0%\",\r\n    height: \"355px\",\r\n  },\r\n  emphasis: {\r\n    fontWeight: 600,\r\n  },\r\n  horizontalScrollItemSpacing: {\r\n    cursor: \"pointer\",\r\n    marginRight: theme.spacing(2),\r\n    width: \"250px\",\r\n    \"&:last-child\": {\r\n      marginRight: 0,\r\n    },\r\n  },\r\n  brokenImageContainer: {\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  lastEntry: {\r\n    width: theme.spacing(2.5),\r\n  },\r\n  titleContainer: {\r\n    zIndex: 1,\r\n    height: \"355px\",\r\n    position: \"absolute\",\r\n    width: \"250px\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  typographyContainer: {\r\n    bottom: theme.spacing(2),\r\n    position: \"absolute\",\r\n  },\r\n  outlinedText: {\r\n    backgroundColor: theme.palette.outlinedText.background,\r\n    color: theme.palette.outlinedText.color,\r\n    padding: theme.spacing(0.5, 0),\r\n  },\r\n  titleHeight: {\r\n    lineHeight: \"28px\",\r\n  },\r\n  dateHeight: {\r\n    lineHeight: \"22px\",\r\n    fontWeight: 200,\r\n  },\r\n  activeSeason: {\r\n    textDecoration: \"underline\",\r\n  },\r\n  activeImage: {\r\n    filter: \"brightness(40%)\",\r\n  },\r\n}));\r\n\r\nconst TVShowSeasonList = () => {\r\n  const classes = useStyles();\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\r\n  const dispatch = useDispatch();\r\n\r\n  const { seasons, name: showName, original_name: originalName } = tvShow;\r\n\r\n  const handleCardClick = (index) => {\r\n    if (selectedSeason !== index) {\r\n      const parmesanio = process.env.REACT_APP_TMDB_PARMESANIO;\r\n\r\n      getTVShowSeasonDetails(\r\n        parmesanio,\r\n        tvShow.id,\r\n        index,\r\n        (response) => {\r\n          dispatch(tvShowsActions.setEpisode(response));\r\n        },\r\n        () => {}\r\n      );\r\n      dispatch(tvShowsActions.setSelectedSeason(index));\r\n    }\r\n  };\r\n\r\n  const renderTitle = ({ isActive, seasonName, airDate }) => {\r\n    return (\r\n      <Box className={classes.titleContainer}>\r\n        <Box className={classes.typographyContainer}>\r\n          <Typography\r\n            className={clsx(classes.title, classes.titleHeight)}\r\n            variant=\"body1\"\r\n          >\r\n            <span\r\n              className={clsx(classes.outlinedText, classes.titleHeight, {\r\n                [classes.activeSeason]: isActive,\r\n              })}\r\n            >\r\n              {seasonName}\r\n            </span>\r\n          </Typography>\r\n          {airDate && (\r\n            <Typography className={classes.subtitle} variant=\"caption\">\r\n              <span\r\n                className={clsx(classes.outlinedText, classes.dateHeight, {\r\n                  [classes.activeSeason]: isActive,\r\n                })}\r\n              >\r\n                {moment(airDate).format(\"MMM D, YYYY\")}\r\n              </span>\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Grid container item xs={12} className={classes.container}>\r\n      <ItemHorizontalContainer imageSize={355} scrollAmount={266}>\r\n        {seasons.map((season) => {\r\n          const {\r\n            air_date: airDate,\r\n            id,\r\n            name,\r\n            poster_path: posterPath,\r\n            season_number: seasonNumber,\r\n          } = season;\r\n\r\n          const isActive = seasonNumber === selectedSeason;\r\n          const seasonName =\r\n            seasonNumber === 0 ? name : `Season ${seasonNumber}`;\r\n\r\n          let imagePath = TMDB_IMAGE_PREFIX;\r\n          if (posterPath) imagePath += `/w780${posterPath}`;\r\n\r\n          return (\r\n            <Grid\r\n              className={classes.horizontalScrollItemSpacing}\r\n              container\r\n              direction=\"column\"\r\n              onClick={() => handleCardClick(seasonNumber)}\r\n              key={`tv-show-season-list-${id}`}\r\n            >\r\n              {posterPath ? (\r\n                <img\r\n                  className={clsx(classes.image, {\r\n                    [classes.activeImage]: isActive,\r\n                  })}\r\n                  alt={`${\r\n                    showName || originalName\r\n                  } Season ${seasonNumber}'s cover`}\r\n                  src={imagePath}\r\n                />\r\n              ) : (\r\n                <BrokenImage\r\n                  type=\"baseImage\"\r\n                  extraClass={`${classes.image} ${classes.brokenImageContainer}`}\r\n                />\r\n              )}\r\n              {renderTitle({ isActive, seasonName, airDate })}\r\n            </Grid>\r\n          );\r\n        })}\r\n      </ItemHorizontalContainer>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowSeasonList;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport moment from \"moment\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { usePath } from \"../hooks\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Grid, useMediaQuery } from \"@material-ui/core\";\r\n\r\nimport ComponentLoader from \"../components/common/ComponentLoader\";\r\nimport ErrorBoundary from \"../components/navigation/ErrorBoundary\";\r\nimport ItemFooter from \"../components/common/item/ItemFooter\";\r\nimport Note from \"../components/common/Note\";\r\nimport ScrollToTop from \"../components/common/ScrollToTop\";\r\nimport Section from \"../components/common/item/detail/Section\";\r\nimport TVShowCast from \"../components/tvShow/TVShowDetails/TVShowCast\";\r\nimport TVShowEpisodes from \"../components/tvShow/TVShowDetails/TVShowEpisodes\";\r\nimport TVShowHeader from \"../components/tvShow/TVShowDetails/TVShowHeader\";\r\nimport TVShowProduction from \"../components/tvShow/TVShowDetails/TVShowProduction\";\r\nimport TVShowRecommendations from \"../components/tvShow/TVShowDetails/TVShowRecommendations\";\r\nimport TVShowReviews from \"../components/tvShow/TVShowDetails/TVShowReviews\";\r\nimport TVShowSeasonDetails from \"../components/tvShow/TVShowDetails/TVShowSeasonDetails\";\r\nimport TVShowSeasonList from \"../components/tvShow/TVShowDetails/TVShowSeasonList\";\r\n\r\nimport { getTVShowDetails, getTVShowSeasonDetails } from \"../api\";\r\n\r\nimport { tvShowsActions } from \"../reducers/ducks\";\r\n\r\nimport {\r\n  NOTE_NO_SELECTED_TV_SHOW,\r\n  NOTE_TV_SHOW_NOT_FOUND,\r\n  NOTE_SEARCH,\r\n} from \"../constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  note: {\r\n    padding: theme.spacing(16, 2),\r\n  },\r\n}));\r\n\r\nconst TVShows = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only(\"xs\"));\r\n  const classes = useStyles();\r\n\r\n  const episodes = useSelector((state) => state.tvShows.episodes);\r\n  const itemDrawerOpen = useSelector((state) => state.sidebar.itemDrawerOpen);\r\n  const isSearchOpen = useSelector((state) => state.sidebar.isSearchOpen);\r\n  const isTVShowLoading = useSelector((state) => state.tvShows.isTVShowLoading);\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n  const dispatch = useDispatch();\r\n\r\n  const [isLoaded, setIsLoaded] = useState(true);\r\n\r\n  const [, tvShowId] = usePath();\r\n\r\n  const {\r\n    cast,\r\n    created_by: createdBy,\r\n    first_air_date: firstAirDate,\r\n    name,\r\n    original_name: originalName,\r\n    production_companies: productionCompanies,\r\n    recommendations,\r\n    reviews,\r\n    seasons,\r\n    tmdb,\r\n  } = tvShow;\r\n\r\n  const filteredEpisodes = episodes.filter(\r\n    (e) =>\r\n      (e.air_date !== null && e.air_date.length > 0) ||\r\n      moment(e.air_date).diff(moment()) < 0\r\n  );\r\n  const sectionVisibility = {\r\n    cast: cast && cast.length > 0,\r\n    episodes: filteredEpisodes && filteredEpisodes.length > 0,\r\n    production:\r\n      (createdBy && createdBy.length > 0) ||\r\n      (productionCompanies && productionCompanies.length > 0),\r\n    recommendations: recommendations && recommendations.length > 0,\r\n    reviews: reviews && reviews.length > 0,\r\n    seasonList: seasons && seasons.length > 0,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tvShowId === \"search\") return;\r\n\r\n    if (tvShowId) {\r\n      const parmesanio = process.env.REACT_APP_TMDB_PARMESANIO;\r\n\r\n      getTVShowDetails(\r\n        parmesanio,\r\n        tvShowId,\r\n        (tvShowResponse) => {\r\n          const { seasons: fetchedSeason } = tvShowResponse;\r\n\r\n          if (fetchedSeason && fetchedSeason.length > 0) {\r\n            const { season_number: latestSeason } = fetchedSeason\r\n              .sort((a, b) => b.season_number - a.season_number)\r\n              .find((e) => e.season_number > 0 && e.air_date);\r\n\r\n            getTVShowSeasonDetails(\r\n              parmesanio,\r\n              tvShowId,\r\n              latestSeason,\r\n              (episodeResponse) => {\r\n                dispatch(\r\n                  tvShowsActions.setActiveTVShow(\r\n                    tvShowResponse,\r\n                    episodeResponse,\r\n                    latestSeason\r\n                  )\r\n                );\r\n                setIsLoaded(true);\r\n              },\r\n              (error) => {\r\n                if (error.response) {\r\n                  dispatch(tvShowsActions.setActiveTVShow({}));\r\n                  setIsLoaded(error.response.data.status_code);\r\n                }\r\n              },\r\n              () => {\r\n                dispatch(tvShowsActions.setDetailsLoading(false));\r\n              }\r\n            );\r\n          } else {\r\n            // no seasons/episodes\r\n            dispatch(tvShowsActions.setActiveTVShow(tvShowResponse, {}, 0));\r\n          }\r\n        },\r\n        (error) => {\r\n          if (error.response) {\r\n            dispatch(tvShowsActions.setActiveTVShow({}));\r\n            setIsLoaded(error.response.data.status_code);\r\n          }\r\n        },\r\n        () => {\r\n          setIsLoaded(true);\r\n          dispatch(tvShowsActions.setDetailsLoading(false));\r\n        }\r\n      );\r\n    }\r\n  }, [tvShowId, dispatch]);\r\n\r\n  if (tvShowId === undefined) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_NO_SELECTED_TV_SHOW} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isTVShowLoading) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  if (isLoaded === 34) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_TV_SHOW_NOT_FOUND} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(tvShow).length === 0 && tvShow.constructor === Object) {\r\n    if (isSearchOpen) {\r\n      return (\r\n        <div className={classes.note}>\r\n          <Note details={NOTE_SEARCH} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <Grid container spacing={isMobile ? 4 : 8} className={classes.root}>\r\n        <Section\r\n          anchorId=\"tvshow-budget\"\r\n          isCollapsible={false}\r\n          visible={\r\n            Object.keys(tvShow).length !== 0 && tvShow.constructor === Object\r\n          }\r\n        >\r\n          <TVShowHeader sectionVisibility={sectionVisibility} />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-seasons\"\r\n          divider={false}\r\n          title=\"Seasons\"\r\n          visible={sectionVisibility.seasonList}\r\n        >\r\n          <TVShowSeasonList />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-season-details\"\r\n          divider={!sectionVisibility.episodes}\r\n          isCollapsible={false}\r\n          visible={sectionVisibility.seasonList}\r\n        >\r\n          <TVShowSeasonDetails />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-episodes\"\r\n          isCollapsible={false}\r\n          title=\"Episodes\"\r\n          visible={sectionVisibility.episodes}\r\n        >\r\n          <TVShowEpisodes />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-cast\"\r\n          title=\"Cast\"\r\n          visible={sectionVisibility.cast}\r\n        >\r\n          <TVShowCast />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-production\"\r\n          title=\"Production\"\r\n          visible={sectionVisibility.production}\r\n        >\r\n          <TVShowProduction />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-reviews\"\r\n          divider\r\n          title=\"Reviews\"\r\n          visible={sectionVisibility.reviews}\r\n        >\r\n          <TVShowReviews />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-recommendations\"\r\n          title=\"Recommendations\"\r\n          visible={sectionVisibility.recommendations}\r\n        >\r\n          <TVShowRecommendations anchorId=\"tvshow-recommendations\" />\r\n        </Section>\r\n\r\n        <Section anchorId=\"tvshow-end-credits\" divider={false}>\r\n          <ItemFooter\r\n            companies={productionCompanies.map((e) => e.name)}\r\n            link={tmdb}\r\n            title={name || originalName}\r\n            year={firstAirDate ? moment(firstAirDate).format(\"YYYY\") : \"\"}\r\n          />\r\n        </Section>\r\n      </Grid>\r\n      {!itemDrawerOpen && <ScrollToTop />}\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default TVShows;\r\n"],"sourceRoot":""}