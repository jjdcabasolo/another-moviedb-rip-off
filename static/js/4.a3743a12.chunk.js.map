{"version":3,"sources":["components/movie/MovieDetails/MovieBudget.js","components/movie/MovieDetails/MovieCast.js","components/movie/MovieDetails/MovieCollection.js","components/common/item/detail/PersonAvatarList.js","components/movie/MovieDetails/MovieCrew.js","components/movie/MovieDetails/MovieHeader.js","components/movie/MovieDetails/MovieProduction.js","components/movie/MovieDetails/MovieRecommendations.js","containers/Movies.js"],"names":["MovieBudget","movie","useSelector","state","movies","budget","revenue","Grid","item","container","justify","alignItems","income","hasIncome","Statistic","col","count","toMillionsOrBillions","divider","key","label","Number","isNaN","renderStatistics","useStyles","makeStyles","theme","breakpoints","only","margin","spacing","horizontalScrollItemSpacing","lastEntry","padding","MovieCast","useTheme","isMobile","useMediaQuery","isSmallTablet","isBigTablet","isDesktop","up","classes","cast","originalTitle","original_title","title","useState","cardCol","setCardCol","useEffect","getCastCol","className","ItemSeeMore","appbarTitle","collapsedClickEvent","scrollToID","collapsedContent","ItemHorizontalContainer","isWithSeeMore","length","maxCount","scrollAmount","slice","map","id","PersonAvatar","character","image","profile_path","name","isHorizontalScroll","expandedContent","ItemLazyLoad","contents","maxItemPerLoad","node","otherProps","type","isButtonShown","sectionId","seeMoreText","MovieCollection","anchorId","collectionContent","collection_content","overview","parts","ItemCardHorizontalList","items","isOverviewCollapsed","demo","backgroundColor","palette","background","paper","fontWeight","typography","h6","brokenImage","color","action","disabled","avatar","border","PersonAvatarList","content","xs","Typography","variant","List","disablePadding","person","job","profilePath","isImageValid","ListItem","ListItemAvatar","Avatar","alt","src","MOVIE_DRAWER_TMDB_IMAGE_PREFIX","BrokenImage","avatarSize","ListItemText","primary","secondary","defaultProps","PropTypes","arrayOf","shape","MovieCrew","crew","crewMembers","setCrewMembers","masonryConfig","setMasonryConfig","getCrewCol","crewCol","setCrewCol","getCrewMembers","director","writer","producer","executiveProducer","composer","cinematography","editor","costume","makeup","lighting","visualEffects","finalCrew","production","CREW_TO_DISPLAY","forEach","e","identifier","a","renderMasonryGrid","crewShowMore","i","colItem","members","crewTitle","filter","c","push","crewStatistic","isTotal","renderStatistic","subtitle","chip","releaseYear","text","fontSize","h4","fontWeightLight","marginLeft","h5","MovieHeader","sectionVisibility","facebook","genres","imdb","instagram","releaseDate","release_date","runtime","tagline","tmdb","twitter","youtube","breadcrumbs","MOVIE_BREADCRUMBS_CONFIG","visibilityId","runtimeHours","runtimeMinutes","moment","format","Chip","size","ItemLinks","TruncatedOverview","maxWords","OVERVIEW_MAX_WORDS","gutterBottom","ItemBreadcrumbs","MovieProduction","productionCompanies","production_companies","company","logoPath","logo_path","originCountry","origin_country","ProductionChip","country","MovieRecommendations","recommendations","areRecommendations","root","trailer","height","between","note","Movies","itemDrawerOpen","sidebar","isMovieLoading","dispatch","useDispatch","isLoaded","setIsLoaded","movieId","useParams","belongsToCollection","belongs_to_collection","collection","Object","keys","hasStatistics","getMovieDetails","decryptKey","response","moviesActions","setActiveMovie","setDetailsLoading","error","data","status_code","undefined","Note","details","NOTE_NO_SELECTED_MOVIE","ComponentLoader","location","NOTE_MOVIE_NOT_FOUND","constructor","Section","isCollapsible","visible","controls","light","pip","url","width","ItemFooter","companies","link","year","ScrollToTop"],"mappings":"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","file":"static/js/4.a3743a12.chunk.js","sourcesContent":["import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Grid } from '@material-ui/core';\n\nimport Statistic from '../../common/item/detail/Statistic';\n\nimport { toMillionsOrBillions } from '../../../utils/functions';\n\nconst MovieBudget = () => {\n  const movie = useSelector((state) => state.movies.movie);\n\n  const { budget, revenue } = movie;\n\n  const renderStatistics = () => {\n    const income = revenue - budget;\n    const hasIncome = income > 0;\n\n    return [\n      (revenue !== 0 && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(revenue)}\n          divider\n          key=\"movie-budget-revenue\"\n          label=\"Revenue\"\n        />\n      )),\n      (budget !== 0 && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(budget)}\n          divider={!Number.isNaN(revenue) && hasIncome}\n          key=\"movie-budget-budget\"\n          label=\"Budget\"\n        />\n      )),\n      (hasIncome && (\n        <Statistic\n          col={4}\n          count={toMillionsOrBillions(income)}\n          key=\"movie-budget-income\"\n          label=\"Income\"\n        />\n      )),\n    ];\n  };\n\n  return (\n    <Grid item container justify=\"center\" alignItems=\"center\">\n      {renderStatistics()}\n    </Grid>\n  );\n};\n\nexport default MovieBudget;\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ItemHorizontalContainer from '../../common/item/ItemHorizontalContainer';\r\nimport ItemLazyLoad from '../../common/item/ItemLazyLoad';\r\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\r\nimport PersonAvatar from '../../common/item/detail/PersonAvatar';\r\n\r\nimport { getCastCol, scrollToID } from '../../../utils/functions';\r\n\r\nimport { MAX_CAST_HORIZONTAL_ITEMS as maxCount } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n    position: 'relative',\r\n    width: 'inherit',\r\n  },\r\n  horizontalScrollItemSpacing: {\r\n    margin: theme.spacing(0, 1),\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: theme.spacing(0, 0.5),\r\n    },\r\n  },\r\n  lastEntry: {\r\n    padding: theme.spacing(0.5),\r\n  },\r\n}));\r\n\r\nconst MovieCast = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('sm'));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only('md'));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const classes = useStyles();\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    cast,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  const [cardCol, setCardCol] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCardCol(getCastCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <ItemSeeMore\r\n        appbarTitle={[title || originalTitle, 'Cast']}\r\n        collapsedClickEvent={() => scrollToID('movie-cast')}\r\n        collapsedContent={(\r\n          <ItemHorizontalContainer\r\n            isWithSeeMore={cast.length > maxCount}\r\n            scrollAmount={144}\r\n          >\r\n            {cast.slice(0, maxCount).map((item) => (\r\n              <div\r\n                className={classes.horizontalScrollItemSpacing}\r\n                key={`movie-cast-person-avatar-${item.id}`}\r\n              >\r\n                <PersonAvatar\r\n                  character={item.character}\r\n                  col={12}\r\n                  image={item.profile_path}\r\n                  name={item.name}\r\n                  isHorizontalScroll\r\n                />\r\n              </div>\r\n            ))}\r\n            {cast.length <= maxCount && isMobile && (\r\n              <div className={classes.lastEntry} />\r\n            )}\r\n          </ItemHorizontalContainer>\r\n        )}\r\n        expandedContent={(\r\n          <Grid container spacing={2}>\r\n            <ItemLazyLoad\r\n              contents={cast}\r\n              maxItemPerLoad={20}\r\n              node={<PersonAvatar />}\r\n              otherProps={{ col: 12 / cardCol }}\r\n              type=\"itemCast\"\r\n            />\r\n          </Grid>\r\n        )}\r\n        isButtonShown={cast.length > maxCount}\r\n        sectionId=\"cast\"\r\n        seeMoreText={`Show all ${cast.length} cast`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieCast;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ItemCardHorizontalList from '../../common/item/ItemCardHorizontalList';\r\n\r\nconst MovieCollection = ({ anchorId }) => {\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    collection_content: collectionContent,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  if (!collectionContent) return null;\r\n\r\n  const { overview, parts } = collectionContent;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      appbarTitle={[title || originalTitle, 'Collection']}\r\n      anchorId={anchorId}\r\n      items={parts}\r\n      isOverviewCollapsed\r\n      overview={overview}\r\n    />\r\n  );\r\n};\r\n\r\nMovieCollection.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default MovieCollection;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Avatar,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Typography,\r\n} from '@material-ui/core';\r\n\r\nimport BrokenImage from '../../BrokenImage';\r\n\r\nimport { MOVIE_DRAWER_TMDB_IMAGE_PREFIX } from '../../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  title: {\r\n    fontWeight: theme.typography.h6.fontWeight,\r\n  },\r\n  brokenImage: {\r\n    color: theme.palette.action.disabled,\r\n  },\r\n  avatar: {\r\n    border: `1px solid ${theme.palette.brokenImage.border}`,\r\n  },\r\n}));\r\n\r\nconst PersonAvatarList = ({\r\n  col = 12,\r\n  content,\r\n  title,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={col}>\r\n      {title && (\r\n        <Typography variant=\"body1\" className={classes.title}>\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      <List disablePadding>\r\n        { content.map((person) => {\r\n          const {\r\n            job,\r\n            name,\r\n            profile_path: profilePath,\r\n          } = person;\r\n          const isImageValid = profilePath !== null;\r\n\r\n          return (\r\n            <ListItem key={`person-avatar-list-${name}`}>\r\n              <ListItemAvatar>\r\n                {isImageValid\r\n                  ? (\r\n                    <Avatar\r\n                      alt={`${name}'s avatar.`}\r\n                      className={classes.avatar}\r\n                      src={`${MOVIE_DRAWER_TMDB_IMAGE_PREFIX}/w154${profilePath}`}\r\n                    />\r\n                  )\r\n                  : <BrokenImage type=\"avatar\" avatarSize=\"small\" />}\r\n              </ListItemAvatar>\r\n              <ListItemText primary={name} secondary={job} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nPersonAvatarList.defaultProps = {\r\n  col: 12,\r\n  content: PropTypes.arrayOf(PropTypes.shape({\r\n    profile_path: '',\r\n  })),\r\n};\r\n\r\nPersonAvatarList.propTypes = {\r\n  col: PropTypes.number,\r\n  content: PropTypes.arrayOf(PropTypes.shape({\r\n    job: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    profile_path: PropTypes.string,\r\n  })),\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PersonAvatarList;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\r\nimport PersonAvatarList from '../../common/item/detail/PersonAvatarList';\r\nimport Statistic from '../../common/item/detail/Statistic';\r\n\r\nimport { getCrewMembers, getCrewCol, scrollToID } from '../../../utils/functions';\r\n\r\nimport { CREW_TO_DISPLAY } from '../../../constants';\r\n\r\nconst MovieCrew = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('sm'));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only('md'));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    crew,\r\n    original_title: originalTitle,\r\n    title,\r\n  } = movie;\r\n\r\n  const [crewMembers, setCrewMembers] = useState({});\r\n  const [masonryConfig, setMasonryConfig] = useState([]);\r\n  const [crewCol, setCrewCol] = useState(getCrewCol());\r\n\r\n  useEffect(() => {\r\n    setCrewCol(getCrewCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  useEffect(() => {\r\n    if (crew && crew.length > 0) {\r\n      const [director] = getCrewMembers(crew, 'directing', ['director']);\r\n      const [writer] = getCrewMembers(crew, 'writing');\r\n      const [producer, executiveProducer] = getCrewMembers(crew, 'production', ['producer', 'executive producer']);\r\n      const [composer] = getCrewMembers(crew, 'sound', ['original music composer']);\r\n      const [cinematography] = getCrewMembers(crew, 'camera', ['director of photography']);\r\n      const [editor] = getCrewMembers(crew, 'editing', ['editor']);\r\n      const [costume, makeup] = getCrewMembers(crew, 'costume & make-up', ['costume design', 'makeup artist']);\r\n      const [lighting] = getCrewMembers(crew, 'lighting');\r\n      const [visualEffects] = getCrewMembers(crew, 'visual effects');\r\n      const production = [...producer, ...executiveProducer];\r\n      const finalCrew = {\r\n        director,\r\n        writer,\r\n        production,\r\n        composer,\r\n        cinematography,\r\n        editor,\r\n        costume,\r\n        makeup,\r\n        lighting,\r\n        visualEffects,\r\n      };\r\n      setCrewMembers(finalCrew);\r\n\r\n      setMasonryConfig([]);\r\n      CREW_TO_DISPLAY.forEach((e) => {\r\n        if (finalCrew[e.identifier].length > 0) setMasonryConfig((a) => [...a, e.identifier]);\r\n      });\r\n    }\r\n  }, [movie, crew]);\r\n\r\n  const renderMasonryGrid = (crewShowMore) => {\r\n    const col = [];\r\n    for (let i = 0; i < crewCol; i += 1) {\r\n      const colItem = [];\r\n      for (let a = i; a < masonryConfig.length; a += crewCol) {\r\n        if (!crewShowMore) {\r\n          if (masonryConfig[a] === 'production'\r\n            || masonryConfig[a] === 'composer'\r\n            || masonryConfig[a] === 'cinematography'\r\n            || masonryConfig[a] === 'editor'\r\n            || masonryConfig[a] === 'costume'\r\n            || masonryConfig[a] === 'makeup') break;\r\n        }\r\n        const members = crewMembers[masonryConfig[a]];\r\n        const crewTitle = CREW_TO_DISPLAY.filter((c) => c.identifier === masonryConfig[a])[0];\r\n        colItem.push(\r\n          <PersonAvatarList\r\n            key={`movie-crew-person-avatar-list-${crewTitle.identifier}`}\r\n            content={members}\r\n            title={crewTitle.label(members.length)}\r\n          />,\r\n        );\r\n      }\r\n      col.push(<Grid item xs={12 / crewCol} key={`movie-crew-masonry-grid-${i}`}>{colItem}</Grid>);\r\n    }\r\n    return col;\r\n  };\r\n\r\n  const renderStatistic = () => {\r\n    const { lighting, visualEffects } = crewMembers;\r\n    const crewStatistic = [\r\n      {\r\n        length: lighting.length,\r\n        label: 'Lighting',\r\n        divider: true,\r\n      },\r\n      {\r\n        length: visualEffects.length,\r\n        label: 'VFX',\r\n        divider: true,\r\n      },\r\n      {\r\n        length: crew.length,\r\n        label: 'Total Crew',\r\n        isTotal: true,\r\n      },\r\n    ].filter((e) => e.length > 0);\r\n\r\n    return crewStatistic.map((e) => (\r\n      <Statistic\r\n        col={12 / crewStatistic.length}\r\n        count={e.length}\r\n        divider={e.divider}\r\n        isTotal={e.isTotal}\r\n        key={`movie-crew-statistic-${e.label}`}\r\n        label={e.label}\r\n      />\r\n    ));\r\n  };\r\n\r\n  if (!('director' in crewMembers)) return null;\r\n\r\n  return (\r\n    <Grid container>\r\n      <ItemSeeMore\r\n        appbarTitle={[title || originalTitle, 'Crew']}\r\n        collapsedClickEvent={() => scrollToID('movie-crew')}\r\n        collapsedContent={(\r\n          <Grid container>\r\n            {renderMasonryGrid()}\r\n          </Grid>\r\n        )}\r\n        expandedContent={(\r\n          <Grid container spacing={2}>\r\n            {renderMasonryGrid(true)}\r\n            <Grid item container justify=\"center\" alignItems=\"center\">{renderStatistic()}</Grid>\r\n          </Grid>\r\n        )}\r\n        sectionId=\"crew\"\r\n        seeMoreText={`Show all ${crew.length} crew`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieCrew;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  Chip,\r\n  Grid,\r\n  Typography,\r\n  useMediaQuery,\r\n} from '@material-ui/core';\r\n\r\nimport ItemBreadcrumbs from '../../common/item/ItemBreadcrumbs';\r\nimport ItemLinks from '../../common/item/ItemLinks';\r\nimport TruncatedOverview from '../../common/TruncatedOverview';\r\n\r\nimport {\r\n  MOVIE_BREADCRUMBS_CONFIG,\r\n  OVERVIEW_MAX_WORDS,\r\n} from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 600,\r\n  },\r\n  subtitle: {\r\n    fontWeight: 400,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.25, 0.5, 0.25, 0),\r\n  },\r\n  releaseYear: {\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.h4.fontSize,\r\n    fontWeight: theme.typography.fontWeightLight,\r\n    marginLeft: theme.spacing(2),\r\n    [theme.breakpoints.only('xs')]: {\r\n      marginLeft: theme.spacing(1),\r\n      fontSize: theme.typography.h5.fontSize,\r\n    },\r\n  },\r\n}));\r\n\r\nconst MovieHeader = ({ sectionVisibility }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    facebook,\r\n    genres,\r\n    imdb,\r\n    instagram,\r\n    original_title: originalTitle,\r\n    overview,\r\n    release_date: releaseDate,\r\n    runtime,\r\n    tagline,\r\n    title,\r\n    tmdb,\r\n    twitter,\r\n    youtube,\r\n  } = movie;\r\n\r\n  const breadcrumbs = MOVIE_BREADCRUMBS_CONFIG.filter((e) => sectionVisibility[e.visibilityId]);\r\n  // eslint-disable-next-line no-bitwise\r\n  const runtimeHours = ~~(runtime / 60);\r\n  const runtimeMinutes = runtime % 60;\r\n\r\n  return (\r\n    <Grid item xs={12} container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography\r\n          className={classes.title}\r\n          variant={isMobile ? 'h4' : 'h2'}\r\n        >\r\n          {title || originalTitle}\r\n          <span className={classes.releaseYear}>\r\n            {`(${moment(releaseDate).format('YYYY')})`}\r\n          </span>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} container alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography\r\n            className={classes.subtitle}\r\n            color=\"textSecondary\"\r\n            variant={isMobile ? 'body1' : 'h6'}\r\n          >\r\n            {releaseDate ? moment(releaseDate).format('MMM D, YYYY') : 'No release date.'}\r\n            &nbsp;&middot;&nbsp;&nbsp;\r\n            {runtime\r\n              ? `${runtimeHours}hr ${runtimeMinutes !== 0 ? `${runtimeMinutes}min` : ''}`\r\n              : 'No runtime yet.'}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        { genres.map((i) => (\r\n          <Chip\r\n            className={classes.chip}\r\n            key={`movie-header-chip-${i.id}`}\r\n            label={i.name}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n          />\r\n        ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <ItemLinks\r\n          facebook={facebook}\r\n          imdb={imdb}\r\n          instagram={instagram}\r\n          tmdb={tmdb}\r\n          twitter={twitter}\r\n          youtube={youtube}\r\n        />\r\n      </Grid>\r\n      {overview && overview.length > 0 && (\r\n        <Grid item xs={12}>\r\n          <TruncatedOverview\r\n            overview={overview}\r\n            maxWords={OVERVIEW_MAX_WORDS}\r\n          />\r\n        </Grid>\r\n      )}\r\n      {tagline && (\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n            variant=\"body1\"\r\n          >\r\n            <em>\r\n              {tagline}\r\n            </em>\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <ItemBreadcrumbs content={breadcrumbs} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nMovieHeader.propTypes = {\r\n  sectionVisibility: {\r\n    collection: false,\r\n  },\r\n};\r\n\r\nMovieHeader.propTypes = {\r\n  sectionVisibility: PropTypes.shape({\r\n    cast: PropTypes.bool.isRequired,\r\n    collection: PropTypes.bool,\r\n    crew: PropTypes.bool.isRequired,\r\n    production: PropTypes.bool.isRequired,\r\n    recommendations: PropTypes.bool.isRequired,\r\n    trailer: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default MovieHeader;\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport ProductionChip from '../../common/item/detail/ProductionChip';\r\n\r\nconst MovieProduction = () => {\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const { production_companies: productionCompanies } = movie;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        {productionCompanies.map((company) => {\r\n          const {\r\n            id,\r\n            logo_path: logoPath,\r\n            name,\r\n            origin_country: originCountry,\r\n          } = company;\r\n\r\n          return (\r\n            <ProductionChip\r\n              key={`movie-production-${id}`}\r\n              country={originCountry}\r\n              image={logoPath}\r\n              name={name}\r\n            />\r\n          );\r\n        })}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default MovieProduction;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ItemCardHorizontalList from '../../common/item/ItemCardHorizontalList';\r\n\r\nconst MovieRecommendations = ({ anchorId }) => {\r\n  const movie = useSelector((state) => state.movies.movie);\r\n\r\n  const {\r\n    original_title: originalTitle,\r\n    title,\r\n    recommendations,\r\n  } = movie;\r\n\r\n  if (!recommendations) return null;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      anchorId={anchorId}\r\n      appbarTitle={[title || originalTitle, 'Recommendations']}\r\n      areRecommendations\r\n      items={recommendations}\r\n      overview={`If you liked ${title || originalTitle}, check out these other movies:`}\r\n    />\r\n  );\r\n};\r\n\r\nMovieRecommendations.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default MovieRecommendations;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport moment from 'moment';\r\nimport ReactPlayer from 'react-player';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ComponentLoader from '../components/common/ComponentLoader';\r\nimport ItemFooter from '../components/common/item/ItemFooter';\r\nimport MovieBudget from '../components/movie/MovieDetails/MovieBudget';\r\nimport MovieCast from '../components/movie/MovieDetails/MovieCast';\r\nimport MovieCollection from '../components/movie/MovieDetails/MovieCollection';\r\nimport MovieCrew from '../components/movie/MovieDetails/MovieCrew';\r\nimport MovieHeader from '../components/movie/MovieDetails/MovieHeader';\r\nimport MovieProduction from '../components/movie/MovieDetails/MovieProduction';\r\nimport MovieRecommendations from '../components/movie/MovieDetails/MovieRecommendations';\r\nimport Note from '../components/common/Note';\r\nimport ScrollToTop from '../components/common/ScrollToTop';\r\nimport Section from '../components/common/item/detail/Section';\r\n\r\nimport { getMovieDetails } from '../api';\r\n\r\nimport { moviesActions } from '../reducers/ducks';\r\n\r\nimport { decryptKey } from '../utils/functions';\r\n\r\nimport {\r\n  NOTE_NO_SELECTED_MOVIE,\r\n  NOTE_MOVIE_NOT_FOUND,\r\n} from '../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  trailer: {\r\n    [theme.breakpoints.only('xs')]: {\r\n      height: `${theme.spacing(24)}px !important`,\r\n    },\r\n    [theme.breakpoints.only('sm')]: {\r\n      height: `${theme.spacing(35)}px !important`,\r\n    },\r\n    [theme.breakpoints.between('sm', 'md')]: {\r\n      height: `${theme.spacing(45)}px !important`,\r\n    },\r\n    [theme.breakpoints.up('md')]: {\r\n      height: `${theme.spacing(60)}px !important`,\r\n    },\r\n  },\r\n  note: {\r\n    padding: theme.spacing(16, 2),\r\n  },\r\n}));\r\n\r\nconst Movies = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const classes = useStyles();\r\n\r\n  const itemDrawerOpen = useSelector((state) => state.sidebar.itemDrawerOpen);\r\n  const movie = useSelector((state) => state.movies.movie);\r\n  const isMovieLoading = useSelector((state) => state.movies.isMovieLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  const [isLoaded, setIsLoaded] = useState(true);\r\n\r\n  const { movieId } = useParams();\r\n\r\n  const {\r\n    belongs_to_collection: belongsToCollection,\r\n    budget,\r\n    cast,\r\n    collection_content: collectionContent,\r\n    crew,\r\n    original_title: originalTitle,\r\n    production_companies: productionCompanies,\r\n    recommendations,\r\n    release_date: releaseDate,\r\n    revenue,\r\n    title,\r\n    tmdb,\r\n    youtube,\r\n  } = movie;\r\n\r\n  const sectionVisibility = {\r\n    trailer: youtube && youtube.length > 0,\r\n    cast: cast && cast.length > 0,\r\n    crew: crew && crew.length > 0,\r\n    production: productionCompanies && productionCompanies.length > 0,\r\n    collection: belongsToCollection && Object.keys(belongsToCollection).length > 0,\r\n    recommendations: recommendations && recommendations.length > 0,\r\n  };\r\n  const hasStatistics = !Number.isNaN(budget)\r\n    && !Number.isNaN(revenue)\r\n    && (budget !== 0 && revenue !== 0);\r\n\r\n  useEffect(() => {\r\n    if (movieId) {\r\n      getMovieDetails(decryptKey(), movieId, (response) => {\r\n        dispatch(moviesActions.setActiveMovie(response));\r\n        dispatch(moviesActions.setDetailsLoading(false));\r\n        setIsLoaded(true);\r\n      }, (error) => {\r\n        if (error.response) {\r\n          dispatch(moviesActions.setActiveMovie({}));\r\n          setIsLoaded(error.response.data.status_code);\r\n        }\r\n      });\r\n    }\r\n  }, [movieId, dispatch]);\r\n\r\n  if (movieId === undefined) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_NO_SELECTED_MOVIE} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isMovieLoading) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  if (isLoaded === 34) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_MOVIE_NOT_FOUND} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(movie).length === 0 && movie.constructor === Object) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={isMobile ? 4 : 8} className={classes.root}>\r\n        <Section\r\n          anchorId=\"movie-header\"\r\n          divider={!hasStatistics}\r\n          isCollapsible={false}\r\n          visible={Object.keys(movie).length !== 0 && movie.constructor === Object}\r\n        >\r\n          <MovieHeader sectionVisibility={sectionVisibility} />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-budget\"\r\n          isCollapsible={false}\r\n          visible={hasStatistics}\r\n        >\r\n          <MovieBudget />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-trailer\"\r\n          title=\"Trailer\"\r\n          visible={sectionVisibility.trailer}\r\n        >\r\n          <ReactPlayer\r\n            className={classes.trailer}\r\n            controls\r\n            light\r\n            pip\r\n            url={youtube}\r\n            width=\"100%\"\r\n          />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-cast\"\r\n          title=\"Cast\"\r\n          visible={sectionVisibility.cast}\r\n        >\r\n          <MovieCast />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-crew\"\r\n          title=\"Crew\"\r\n          visible={sectionVisibility.crew}\r\n        >\r\n          <MovieCrew />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-production\"\r\n          divider\r\n          title=\"Production\"\r\n          visible={sectionVisibility.production}\r\n        >\r\n          <MovieProduction />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-collection\"\r\n          title={collectionContent ? collectionContent.name : ''}\r\n          visible={sectionVisibility.collection}\r\n        >\r\n          <MovieCollection anchorId=\"movie-collection\" />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-recommendations\"\r\n          title=\"Recommendations\"\r\n          visible={sectionVisibility.recommendations}\r\n        >\r\n          <MovieRecommendations anchorId=\"movie-recommendations\" />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"movie-end-credits\"\r\n          divider={false}\r\n        >\r\n          <ItemFooter\r\n            companies={productionCompanies.map((e) => e.name)}\r\n            link={tmdb}\r\n            title={title || originalTitle}\r\n            year={moment(releaseDate).format('YYYY')}\r\n          />\r\n        </Section>\r\n      </Grid>\r\n      {!itemDrawerOpen && <ScrollToTop />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"sourceRoot":""}