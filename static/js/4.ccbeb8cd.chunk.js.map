{"version":3,"sources":["components/tvShow/TVShowDetails/TVShowCast.js","../node_modules/@material-ui/lab/esm/AvatarGroup/AvatarGroup.js","components/tvShow/TVShowDetails/TVShowEpisode.js","components/tvShow/TVShowDetails/TVShowEpisodes.js","components/tvShow/TVShowDetails/TVShowHeader.js","components/tvShow/TVShowDetails/TVShowProduction.js","components/tvShow/TVShowDetails/TVShowRecommendations.js","components/tvShow/TVShowDetails/TVShowReviews.js","components/tvShow/TVShowDetails/TVShowSeasonDetails.js","components/tvShow/TVShowDetails/TVShowSeasonList.js","components/tvShow/TVShowDetails/TVShowStatistics.js","containers/TVShows.js"],"names":["useStyles","makeStyles","theme","container","breakpoints","only","margin","spacing","horizontalScrollItemSpacing","lastEntry","padding","TVShowCast","classes","useTheme","isMobile","useMediaQuery","isSmallTablet","isBigTablet","isDesktop","up","tvShow","useSelector","state","tvShows","history","useHistory","useState","cardCol","setCardCol","cast","name","originalName","original_name","useEffect","getCastCol","Grid","className","ItemSeeMore","appbarTitle","collapsedClickEvent","scrollToID","collapsedContent","ItemHorizontalContainer","handleSeeMore","push","location","pathname","isWithSeeMore","length","maxCount","scrollAmount","slice","map","item","key","id","PersonAvatar","character","col","image","profile_path","isHorizontalScroll","expandedContent","ItemLazyLoad","contents","maxItemPerLoad","node","otherProps","type","isButtonShown","sectionId","seeMoreText","SPACINGS","small","medium","AvatarGroup","React","props","ref","childrenProp","children","_props$max","max","_props$spacing","other","_objectWithoutProperties","clampedMax","toArray","filter","child","extraAvatars","marginLeft","undefined","_extends","clsx","root","index","avatar","style","zIndex","Avatar","withStyles","display","border","concat","palette","background","default","gridItem","marginBottom","maxWidth","dividerContainer","paddingTop","paddingBottom","brokenImage","borderRadius","shape","height","objectFit","objectPosition","width","brokenImageContainer","alignItems","justifyContent","renderCrew","crew","label","xs","Typography","color","variant","TVShowEpisode","episode","isCollapsed","isLastItem","usePath","section","isSectionActive","maxGuestsToShow","airDate","air_date","episodeNumber","episode_number","guestStars","guest_stars","episodeName","overview","stillPath","still_path","moment","diff","episodeImagePath","TMDB_IMAGE_PREFIX","e","job","director","writer","sectionActiveGridSize","direction","md","sm","alt","src","BrokenImage","extraClass","activeImage","noWrap","gutterBottom","format","NO_DATE_TEXT","TruncatedOverview","Object","keys","guest","i","profilePath","guestImagePath","Tooltip","enterTouchDelay","title","placement","Divider","defaultProps","TVShowEpisodes","episodes","isSeasonLoading","isTVShowLoading","selectedSeason","maxEpisodesToShow","filteredEpisodes","renderEpisodeList","episodesToDisplay","hideLoader","ComponentLoader","isEpisode","fontWeight","subtitle","chip","releaseYear","text","secondary","fontSize","typography","h4","fontWeightLight","h5","TVShowHeader","sectionVisibility","episodeRunTime","episode_run_time","facebook","firstAirDate","first_air_date","genres","imdb","instagram","status","tagline","tmdb","twitter","breadcrumbs","TV_SHOW_BREADCRUMBS_CONFIG","visibilityId","runtimeHours","runtimeMinutes","Chip","getTVShowStatus","size","ItemLinks","ItemBreadcrumbs","content","h6","TVShowProduction","createdBy","created_by","networks","productionCompanies","production_companies","productionCountries","production_countries","spokenLanguages","spoken_languages","hasCreatedBy","hasNetworks","hasProductionCompany","hasProductionCountry","hasSpokenLanguages","renderProduction","items","justify","person","ProductionChip","network","logoPath","logo_path","originCountry","origin_country","country","company","enumerate","iso_3166_1","english_name","iso_639_1","TVShowRecommendations","anchorId","recommendations","ItemCardHorizontalList","areRecommendations","TVShowReviews","reviews","reviewsUI","review","author","author_details","date","created_at","rating","ItemReview","divider","TVShowSeasonDetails","seasons","selectSeason","seasonName","position","emphasis","cursor","marginRight","TVShowSeasonList","dispatch","useDispatch","imageSize","season","posterPath","poster_path","seasonNumber","season_number","isActive","imagePath","onClick","getTVShowSeasonDetails","process","response","tvShowsActions","setEpisode","setSelectedSeason","handleCardClick","TVShowStatistics","numberOfEpisodes","number_of_episodes","numberOfSeasons","number_of_seasons","Statistic","count","note","TVShows","itemDrawerOpen","sidebar","isLoaded","setIsLoaded","tvShowId","production","seasonList","hasStatistics","Number","isNaN","parmesanio","getTVShowDetails","tvShowResponse","fetchedSeason","latestSeason","sort","a","b","find","episodeResponse","setActiveTVShow","setDetailsLoading","error","data","status_code","Note","details","NOTE_NO_SELECTED_TV_SHOW","NOTE_TV_SHOW_NOT_FOUND","constructor","Section","isCollapsible","visible","ItemFooter","companies","link","year","ScrollToTop"],"mappings":"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","file":"static/js/4.ccbeb8cd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ItemHorizontalContainer from '../../common/item/ItemHorizontalContainer';\r\nimport ItemLazyLoad from '../../common/item/ItemLazyLoad';\r\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\r\nimport PersonAvatar from '../../common/item/detail/PersonAvatar';\r\n\r\nimport { getCastCol, scrollToID } from '../../../utils/functions';\r\n\r\nimport { MAX_CAST_HORIZONTAL_ITEMS as maxCount } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    [theme.breakpoints.only('xs')]: {\r\n      margin: theme.spacing(2, 0),\r\n    },\r\n    position: 'relative',\r\n    width: 'inherit',\r\n  },\r\n  horizontalScrollItemSpacing: {\r\n    margin: theme.spacing(0, 1),\r\n  },\r\n  lastEntry: {\r\n    padding: theme.spacing(1.5),\r\n  },\r\n}));\r\n\r\nconst SECTION_ID = 'cast';\r\n\r\nconst TVShowCast = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('sm'));\r\n  const isBigTablet = useMediaQuery(theme.breakpoints.only('md'));\r\n  const isDesktop = useMediaQuery(theme.breakpoints.up('lg'));\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const history = useHistory();\r\n\r\n  const [cardCol, setCardCol] = useState(0);\r\n\r\n  const {\r\n    cast,\r\n    name,\r\n    original_name: originalName,\r\n  } = tvShow;\r\n\r\n  useEffect(() => {\r\n    setCardCol(getCastCol(isMobile, isSmallTablet));\r\n  }, [isMobile, isSmallTablet, isBigTablet, isDesktop]);\r\n\r\n  const handleSeeMore = () => {\r\n    history.push(`${history.location.pathname}/${SECTION_ID}`);\r\n  };\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <ItemSeeMore\r\n        appbarTitle={[name || originalName, 'Cast']}\r\n        collapsedClickEvent={() => scrollToID('tvshow-cast')}\r\n        collapsedContent={(\r\n          <ItemHorizontalContainer\r\n            handleSeeMore={handleSeeMore}\r\n            isWithSeeMore={cast.length > maxCount}\r\n            scrollAmount={144}\r\n          >\r\n            {cast.slice(0, maxCount).map((item) => (\r\n              <div\r\n                className={classes.horizontalScrollItemSpacing}\r\n                key={`tv-show-cast-person-avatar-${item.id}`}\r\n              >\r\n                <PersonAvatar\r\n                  character={item.character}\r\n                  col={12}\r\n                  image={item.profile_path}\r\n                  name={item.name}\r\n                  isHorizontalScroll\r\n                />\r\n              </div>\r\n            ))}\r\n            {cast.length <= maxCount && isMobile && (\r\n              <div className={classes.lastEntry} />\r\n            )}\r\n          </ItemHorizontalContainer>\r\n        )}\r\n        expandedContent={(\r\n          <Grid container spacing={2}>\r\n            <ItemLazyLoad\r\n              contents={cast}\r\n              maxItemPerLoad={20}\r\n              node={<PersonAvatar />}\r\n              otherProps={{ col: 12 / cardCol }}\r\n              type=\"itemCast\"\r\n            />\r\n          </Grid>\r\n        )}\r\n        isButtonShown={cast.length > maxCount}\r\n        sectionId={SECTION_ID}\r\n        seeMoreText={`Show all ${cast.length} cast`}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowCast;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { chainPropTypes } from '@material-ui/utils';\nvar SPACINGS = {\n  small: -16,\n  medium: null\n};\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8,\n      '&:first-child': {\n        marginLeft: 0\n      }\n    }\n  };\n};\nvar AvatarGroup = /*#__PURE__*/React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 5 : _props$max,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'medium' : _props$spacing,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"max\", \"spacing\"]);\n\n  var clampedMax = max < 2 ? 2 : max;\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return /*#__PURE__*/React.isValidElement(child);\n  });\n  var extraAvatars = children.length > clampedMax ? children.length - clampedMax + 1 : 0;\n  var marginLeft = spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), children.slice(0, children.length - extraAvatars).map(function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, {\n      className: clsx(child.props.className, classes.avatar),\n      style: _extends({\n        zIndex: children.length - index,\n        marginLeft: index === 0 ? undefined : marginLeft\n      }, child.props.style)\n    });\n  }), extraAvatars ? /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    style: {\n      zIndex: 0,\n      marginLeft: marginLeft\n    }\n  }, \"+\", extraAvatars) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   */\n  max: chainPropTypes(PropTypes.number, function (props) {\n    if (props.max < 2) {\n      throw new Error(['Material-UI: The prop `max` should be equal to 2 or above.', 'A value below is clamped to 2.'].join('\\n'));\n    }\n  }),\n\n  /**\n   * Spacing between avatars.\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport moment from 'moment';\nimport { usePath } from '../../../hooks';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  Avatar,\n  Divider,\n  Grid,\n  Tooltip,\n  Typography,\n  useMediaQuery,\n} from '@material-ui/core';\nimport { AvatarGroup } from '@material-ui/lab';\n\nimport BrokenImage from '../../common/BrokenImage';\nimport TruncatedOverview from '../../common/TruncatedOverview';\n\nimport { TMDB_IMAGE_PREFIX, NO_DATE_TEXT } from '../../../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  gridItem: {\n    marginBottom: theme.spacing(1),\n    maxWidth: '100%',\n  },\n  dividerContainer: {\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(2),\n    [theme.breakpoints.only('xs')]: {\n      paddingTop: theme.spacing(4),\n    },\n  },\n  image: {\n    border: `1px solid ${theme.palette.brokenImage.border}`,\n    borderRadius: theme.shape.borderRadius,\n    height: theme.spacing(25),\n    objectFit: 'cover',\n    objectPosition: '50% 0%',\n    width: '100%',\n  },\n  brokenImageContainer: {\n    alignItems: 'center',\n    borderRadius: theme.shape.borderRadius,\n    display: 'flex',\n    justifyContent: 'center',\n    marginBottom: theme.spacing(0.5),\n    padding: theme.spacing(1),\n  },\n  avatar: {\n    border: `1px solid ${theme.palette.brokenImage.border}`,\n    height: theme.spacing(4),\n    width: theme.spacing(4),\n  },\n}));\n\nconst renderCrew = (crew, label) => crew && (\n  <Grid item xs={6}>\n    <Typography color=\"textSecondary\" variant=\"caption\">\n      {label}\n    </Typography>\n    <Typography variant=\"body2\">\n      {crew.name || crew.original_name}\n    </Typography>\n  </Grid>\n);\n\nconst TVShowEpisode = ({\n  episode,\n  isCollapsed,\n  isLastItem,\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\n  const isSmallTablet = useMediaQuery(theme.breakpoints.only('md'));\n  const classes = useStyles();\n\n  const [, , section] = usePath();\n  const isSectionActive = section && section.length !== 0;\n\n  const maxGuestsToShow = isSmallTablet ? 12 : 10;\n\n  const {\n    air_date: airDate,\n    crew,\n    episode_number: episodeNumber,\n    guest_stars: guestStars,\n    name: episodeName,\n    overview,\n    still_path: stillPath,\n  } = episode;\n\n  if (!airDate || moment(airDate).diff(moment()) > 0) return null;\n\n  let episodeImagePath = TMDB_IMAGE_PREFIX;\n  if (stillPath) episodeImagePath += `/w780${stillPath}`;\n\n  const [director] = crew.filter((e) => e.job === 'Director');\n  const [writer] = crew.filter((e) => e.job === 'Writer');\n  const sectionActiveGridSize = isSectionActive ? 12 : 6;\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      item\n      md={isCollapsed ? 6 : sectionActiveGridSize}\n      sm={isCollapsed ? 6 : sectionActiveGridSize}\n      xs={12}\n    >\n      <Grid item className={classes.gridItem}>\n        {stillPath\n          ? (\n            <img\n              className={classes.image}\n              alt=\"Season cover\"\n              src={episodeImagePath}\n            />\n          )\n          : (\n            <BrokenImage\n              type=\"baseImage\"\n              extraClass={`${classes.activeImage} ${classes.image} ${classes.brokenImageContainer}`}\n            />\n          )}\n      </Grid>\n      <Grid item className={classes.gridItem}>\n        <Typography noWrap>\n          {`${episodeNumber} · ${episodeName}`}\n        </Typography>\n        <Typography color=\"textSecondary\" variant=\"body2\" noWrap gutterBottom>\n          {airDate ? moment(airDate).format('MMM D, YYYY') : NO_DATE_TEXT}\n        </Typography>\n      </Grid>\n      <Grid item className={classes.gridItem}>\n        <TruncatedOverview overview={overview} variant=\"body2\" />\n      </Grid>\n      {director && Object.keys(director).length > 0\n        && writer && Object.keys(writer).length > 0 && (\n          <Grid item className={classes.gridItem} container>\n            {renderCrew(director, 'Director')}\n            {renderCrew(writer, 'Writer')}\n          </Grid>\n        )}\n      {guestStars.length > 0 && (\n        <Grid item className={classes.gridItem}>\n          <Typography color=\"textSecondary\" variant=\"caption\">\n            Guests\n          </Typography>\n          <AvatarGroup max={maxGuestsToShow}>\n            {guestStars.map((guest, i) => {\n              const { id, profile_path: profilePath } = guest;\n\n              let guestImagePath = TMDB_IMAGE_PREFIX;\n              if (stillPath) guestImagePath += `/w780${profilePath}`;\n\n              if (i < maxGuestsToShow) {\n                return (\n                  <Tooltip\n                    enterTouchDelay={50}\n                    key={`tv-show-episode-avatar-group-${id}`}\n                    title={`${guest.character} / ${guest.name}`}\n                    placement=\"top\"\n                  >\n                    <Avatar\n                      className={classes.avatar}\n                      src={guestImagePath}\n                    />\n                  </Tooltip>\n                );\n              }\n\n              return null;\n            })}\n          </AvatarGroup>\n        </Grid>\n      )}\n      {!isCollapsed\n        && (isMobile || isSectionActive)\n        && isLastItem && (\n          <Grid item className={classes.dividerContainer}>\n            <Divider />\n          </Grid>\n        )}\n    </Grid>\n  );\n};\n\nTVShowEpisode.defaultProps = {\n  episode: {\n    air_date: '',\n    crew: [],\n    episode_number: 0,\n    guest_stars: [],\n    name: '',\n    overview: '',\n    still_path: '',\n  },\n  isCollapsed: false,\n  isLastItem: false,\n};\n\nTVShowEpisode.propTypes = {\n  episode: PropTypes.shape({\n    air_date: PropTypes.string,\n    crew: PropTypes.arrayOf(PropTypes.shape()),\n    episode_number: PropTypes.number,\n    guest_stars: PropTypes.arrayOf(PropTypes.shape()),\n    name: PropTypes.string,\n    overview: PropTypes.string,\n    still_path: PropTypes.string,\n  }),\n  isCollapsed: PropTypes.bool,\n  isLastItem: PropTypes.bool,\n};\n\nexport default TVShowEpisode;\n","import React from 'react';\n\nimport moment from 'moment';\nimport { useSelector } from 'react-redux';\n\nimport { useTheme } from '@material-ui/core/styles';\nimport { Grid, useMediaQuery } from '@material-ui/core';\n\nimport ComponentLoader from '../../common/ComponentLoader';\nimport ItemLazyLoad from '../../common/item/ItemLazyLoad';\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\n\nimport { scrollToID } from '../../../utils/functions';\n\nimport TVShowEpisode from './TVShowEpisode';\n\nconst TVShowEpisodes = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\n\n  const episodes = useSelector((state) => state.tvShows.episodes);\n  const isSeasonLoading = useSelector((state) => state.tvShows.isSeasonLoading);\n  const isTVShowLoading = useSelector((state) => state.tvShows.isTVShowLoading);\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\n\n  const { name, original_name: originalName } = tvShow;\n\n  const maxEpisodesToShow = isMobile ? 1 : 2;\n  const filteredEpisodes = episodes.filter((e) => (!e.air_date && e.air_date.length > 0)\n    || moment(e.air_date).diff(moment()) < 0);\n\n  const renderEpisodeList = (episodesToDisplay, isCollapsed) => (\n    <Grid container spacing={isMobile ? 3 : 2}>\n      <ItemLazyLoad\n        contents={episodesToDisplay}\n        hideLoader={isCollapsed}\n        node={<TVShowEpisode />}\n        otherProps={{ isCollapsed }}\n        type=\"tvShowEpisode\"\n      />\n    </Grid>\n  );\n\n  if (isSeasonLoading || isTVShowLoading) {\n    return (\n      <ComponentLoader\n        label={`Getting episodes from Season ${selectedSeason}...`}\n      />\n    );\n  }\n\n  return (\n    <ItemSeeMore\n      appbarTitle={[name || originalName, `Season ${selectedSeason} Episodes`]}\n      collapsedClickEvent={() => scrollToID('tvshow-episodes')}\n      collapsedContent={renderEpisodeList(filteredEpisodes.slice(0, maxEpisodesToShow), true)}\n      expandedContent={renderEpisodeList(filteredEpisodes, false)}\n      isButtonShown={filteredEpisodes.length > maxEpisodesToShow}\n      isEpisode\n      maxWidth=\"sm\"\n      sectionId=\"episodes\"\n      seeMoreText={`Show all ${filteredEpisodes.length} episodes`}\n    />\n  );\n};\n\nexport default TVShowEpisodes;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  Chip,\r\n  Grid,\r\n  Typography,\r\n  useMediaQuery,\r\n} from '@material-ui/core';\r\n\r\nimport ItemBreadcrumbs from '../../common/item/ItemBreadcrumbs';\r\nimport ItemLinks from '../../common/item/ItemLinks';\r\nimport TruncatedOverview from '../../common/TruncatedOverview';\r\n\r\nimport { getTVShowStatus } from '../../../utils/functions';\r\n\r\nimport { NO_DATE_TEXT, TV_SHOW_BREADCRUMBS_CONFIG } from '../../../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: 600,\r\n  },\r\n  subtitle: {\r\n    fontWeight: 400,\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(0.25, 0.5, 0.25, 0),\r\n  },\r\n  releaseYear: {\r\n    color: theme.palette.text.secondary,\r\n    fontSize: theme.typography.h4.fontSize,\r\n    fontWeight: theme.typography.fontWeightLight,\r\n    marginLeft: theme.spacing(2),\r\n    [theme.breakpoints.only('xs')]: {\r\n      marginLeft: theme.spacing(1),\r\n      fontSize: theme.typography.h5.fontSize,\r\n    },\r\n  },\r\n}));\r\n\r\nconst TVShowHeader = ({ sectionVisibility }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const {\r\n    episode_run_time: episodeRunTime,\r\n    facebook,\r\n    first_air_date: firstAirDate,\r\n    genres,\r\n    imdb,\r\n    instagram,\r\n    name,\r\n    original_name: originalName,\r\n    overview,\r\n    status,\r\n    tagline,\r\n    tmdb,\r\n    twitter,\r\n  } = tvShow;\r\n\r\n  const breadcrumbs = TV_SHOW_BREADCRUMBS_CONFIG.filter((e) => sectionVisibility[e.visibilityId]);\r\n  // eslint-disable-next-line no-bitwise\r\n  const runtimeHours = ~~(episodeRunTime[0] / 60);\r\n  const runtimeMinutes = episodeRunTime[0] % 60;\r\n\r\n  return (\r\n    <Grid item xs={12} container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography\r\n          className={classes.title}\r\n          variant={isMobile ? 'h4' : 'h2'}\r\n        >\r\n          {name || originalName}\r\n          {firstAirDate && (\r\n            <span className={classes.releaseYear}>\r\n              {`(${moment(firstAirDate).format('YYYY')})`}\r\n            </span>\r\n          )}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12} container alignItems=\"center\">\r\n        <Typography\r\n          className={classes.subtitle}\r\n          color=\"textSecondary\"\r\n          variant={isMobile ? 'body1' : 'h6'}\r\n        >\r\n          {firstAirDate ? moment(firstAirDate).format('MMM D, YYYY') : NO_DATE_TEXT}\r\n          {episodeRunTime.length > 0\r\n            && ` · ${runtimeHours > 0 ? `${runtimeHours}hr` : ''} ${runtimeMinutes !== 0 ? `${runtimeMinutes}min` : ''}`}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Chip\r\n          className={classes.chip}\r\n          label={getTVShowStatus(status)}\r\n          size=\"small\"\r\n        />\r\n        {genres.map((i) => (\r\n          <Chip\r\n            key={`tv-show-header-chip-${i.id}`}\r\n            className={classes.chip}\r\n            label={i.name}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n          />\r\n        ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <ItemLinks\r\n          facebook={facebook}\r\n          imdb={imdb}\r\n          instagram={instagram}\r\n          tmdb={tmdb}\r\n          twitter={twitter}\r\n        />\r\n      </Grid>\r\n      {overview && overview.length > 0 && (\r\n        <Grid item xs={12}>\r\n          <TruncatedOverview overview={overview} />\r\n        </Grid>\r\n      )}\r\n      {tagline && (\r\n        <Grid item xs={12}>\r\n          <Typography\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n            variant=\"body1\"\r\n          >\r\n            <em>\r\n              {tagline}\r\n            </em>\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={12}>\r\n        <ItemBreadcrumbs content={breadcrumbs} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nTVShowHeader.propTypes = {\r\n  sectionVisibility: PropTypes.shape({\r\n    cast: PropTypes.bool.isRequired,\r\n    episodes: PropTypes.bool.isRequired,\r\n    production: PropTypes.bool.isRequired,\r\n    recommendations: PropTypes.bool.isRequired,\r\n    seasonList: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default TVShowHeader;\r\n","import React from 'react';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, Typography, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ProductionChip from '../../common/item/detail/ProductionChip';\r\n\r\nimport { enumerate } from '../../../utils/functions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontWeight: theme.typography.h6.fontWeight,\r\n    width: '100%',\r\n  },\r\n}));\r\n\r\nconst TVShowProduction = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const classes = useStyles();\r\n\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const {\r\n    created_by: createdBy,\r\n    networks,\r\n    production_companies: productionCompanies,\r\n    production_countries: productionCountries,\r\n    spoken_languages: spokenLanguages,\r\n  } = tvShow;\r\n\r\n  const hasCreatedBy = createdBy && createdBy.length > 0;\r\n  const hasNetworks = networks && networks.length > 0;\r\n  const hasProductionCompany = productionCompanies && productionCompanies.length > 0;\r\n  const hasProductionCountry = productionCountries && productionCountries.length > 0;\r\n  const hasSpokenLanguages = spokenLanguages && spokenLanguages.length > 0;\r\n\r\n  const renderProduction = (title, items, xs = isMobile ? 12 : 6) => (\r\n    <Grid item xs={xs} container>\r\n      <Typography variant=\"body1\" gutterBottom className={classes.title}>\r\n        {title}\r\n      </Typography>\r\n      {items}\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Grid item container>\r\n      <Grid\r\n        alignItems=\"flex-start\"\r\n        container\r\n        direction=\"row\"\r\n        item\r\n        justify=\"flex-start\"\r\n        spacing={3}\r\n        xs={12}\r\n      >\r\n        {hasCreatedBy && renderProduction('Created by', createdBy.map((person) => {\r\n          const { id, name, profile_path: profilePath } = person;\r\n\r\n          return (\r\n            <Grid item key={`tv-show-production-created-by-chip-${id}`}>\r\n              <ProductionChip image={profilePath} name={name} />\r\n            </Grid>\r\n          );\r\n        }))}\r\n        {hasNetworks && renderProduction('Network', networks.map((network) => {\r\n          const { id, logo_path: logoPath, name, origin_country: originCountry } = network;\r\n\r\n          return (\r\n            <Grid item key={`tv-show-production-network-chip-${id}`}>\r\n              <ProductionChip country={originCountry} image={logoPath} name={name} />\r\n            </Grid>\r\n          );\r\n        }))}\r\n        {hasProductionCompany && renderProduction('Companies', productionCompanies.map((company) => {\r\n          const { id, logo_path: logoPath, name, origin_country: originCountry } = company;\r\n\r\n          return (\r\n            <Grid item key={`tv-show-production-production-company-chip-${id}`}>\r\n              <ProductionChip country={originCountry} image={logoPath} name={name} />\r\n            </Grid>\r\n          )\r\n        }), 12)}\r\n        {hasProductionCountry && renderProduction('Country', (\r\n          <Typography variant=\"body2\">\r\n            {enumerate(productionCountries.map(e => `${e.name} (${e.iso_3166_1})`))}\r\n          </Typography>\r\n        ))}\r\n        {hasSpokenLanguages && renderProduction('Spoken Languages', (\r\n          <Typography variant=\"body2\">\r\n            {enumerate(spokenLanguages.map(e => `${e.english_name} (${e.iso_639_1})`))}\r\n          </Typography>\r\n        ))}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowProduction;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport ItemCardHorizontalList from '../../common/item/ItemCardHorizontalList';\r\n\r\nconst TVShowRecommendations = ({ anchorId }) => {\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const {\r\n    name,\r\n    original_name: originalName,\r\n    recommendations,\r\n  } = tvShow;\r\n\r\n  if (!recommendations) return null;\r\n\r\n  return (\r\n    <ItemCardHorizontalList\r\n      anchorId={anchorId}\r\n      appbarTitle={[name || originalName, 'Recommendations']}\r\n      areRecommendations\r\n      items={recommendations}\r\n      overview={`If you liked ${name || originalName}, check out these other TV shows:`}\r\n    />\r\n  );\r\n};\r\n\r\nTVShowRecommendations.propTypes = {\r\n  anchorId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TVShowRecommendations;\r\n","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Grid } from '@material-ui/core';\n\nimport ItemReview from '../../common/item/ItemReview';\nimport ItemSeeMore from '../../common/item/ItemSeeMore';\n\nimport { scrollToID } from '../../../utils/functions';\n\nconst SECTION_ID = 'reviews';\n\nconst TVShowReviews = () => {\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\n\n  const {\n    name,\n    original_name: originalName,\n    reviews,\n  } = tvShow;\n\n  if (!reviews) return null;\n\n  const reviewsUI = reviews.map((review, index) => {\n    const {\n      author,\n      author_details,\n      created_at: date,\n      content,\n    } = review;\n\n    const { rating } = author_details;\n\n    return (\n      <ItemReview\n        author={author}\n        content={content}\n        date={date}\n        rating={rating}\n        divider={index !== 0}\n      />\n    );\n  });\n\n  return (\n    <Grid container>\n      <ItemSeeMore\n        appbarTitle={[name || originalName, 'Reviews']}\n        collapsedClickEvent={() => scrollToID('tvshow-reviews')}\n        collapsedContent={reviewsUI[0]}\n        expandedContent={reviewsUI}\n        isButtonShown={reviews.length > 1}\n        isEpisode\n        sectionId={SECTION_ID}\n        seeMoreText={`Show all ${reviews.length} reviews`}\n      />\n    </Grid>\n  );\n};\n\nexport default TVShowReviews;\n","import React from 'react';\r\n\r\nimport moment from 'moment';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\nimport TruncatedOverview from '../../common/TruncatedOverview';\r\n\r\nimport { selectSeason } from '../../../utils/functions';\r\n\r\nimport { NO_DATE_TEXT } from '../../../constants';\r\n\r\nconst TVShowSeasonDetails = () => {\r\n  const episodes = useSelector((state) => state.tvShows.episodes);\r\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n\r\n  const { seasons } = tvShow;\r\n\r\n  const {\r\n    air_date: airDate,\r\n    name: seasonName,\r\n    overview,\r\n  } = selectSeason(seasons, selectedSeason);\r\n\r\n  const filteredEpisodes = episodes.filter((e) => (!e.air_date && e.air_date.length > 0)\r\n    || moment(e.air_date).diff(moment()) < 0).length;\r\n\r\n  return (\r\n    <Grid item container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h6\">\r\n          {seasonName}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">\r\n          {airDate ? moment(airDate).format('MMM D, YYYY') : NO_DATE_TEXT}\r\n          {filteredEpisodes > 0 && (\r\n            <>\r\n              &nbsp;&nbsp;&middot;&nbsp;&nbsp;\r\n              {`${filteredEpisodes} episode${filteredEpisodes > 1 ? 's' : ''}`}\r\n            </>\r\n          )}\r\n        </Typography>\r\n      </Grid>\r\n      {overview && (\r\n        <Grid item xs={12}>\r\n          <TruncatedOverview overview={overview} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TVShowSeasonDetails;\r\n","import React from 'react';\n\nimport clsx from 'clsx';\nimport moment from 'moment';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Grid, Typography, useMediaQuery } from '@material-ui/core';\n\nimport BrokenImage from '../../common/BrokenImage';\nimport ItemHorizontalContainer from '../../common/item/ItemHorizontalContainer';\n\nimport { getTVShowSeasonDetails } from '../../../api';\n\nimport { tvShowsActions } from '../../../reducers/ducks';\n\nimport { TMDB_IMAGE_PREFIX, NO_DATE_TEXT } from '../../../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    position: 'relative',\n  },\n  image: {\n    border: `1px solid ${theme.palette.brokenImage.border}`,\n    borderRadius: theme.shape.borderRadius,\n    height: theme.spacing(25),\n    objectFit: 'cover',\n    objectPosition: '50% 0%',\n    width: theme.spacing(18.75),\n  },\n  activeImage: {\n    border: `1px solid ${theme.palette.divider} !important`,\n    borderRadius: theme.shape.borderRadius,\n  },\n  emphasis: {\n    fontWeight: 600,\n  },\n  horizontalScrollItemSpacing: {\n    border: '1px solid transparent',\n    cursor: 'pointer',\n    margin: 0,\n    padding: theme.spacing(1),\n    maxWidth: theme.spacing(22.25),\n    [theme.breakpoints.only('xs')]: {\n      '&:last-child': {\n        marginRight: theme.spacing(2),\n      },\n    },\n  },\n  gridItem: {\n    maxWidth: '100%',\n  },\n  brokenImageContainer: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    padding: theme.spacing(1),\n  },\n  lastEntry: {\n    width: theme.spacing(2.5),\n  },\n}));\n\nconst TVShowSeasonList = () => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\n  const classes = useStyles();\n\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\n  const selectedSeason = useSelector((state) => state.tvShows.selectedSeason);\n  const dispatch = useDispatch();\n\n  const { seasons } = tvShow;\n\n  const handleCardClick = (index) => {\n    if (selectedSeason !== index) {\n      const parmesanio = process.env.REACT_APP_TMDB_PARMESANIO;\n\n      getTVShowSeasonDetails(parmesanio, tvShow.id, index, (response) => {\n        dispatch(tvShowsActions.setEpisode(response));\n      }, () => { });\n      dispatch(tvShowsActions.setSelectedSeason(index));\n    }\n  };\n\n  return (\n    <Grid container item xs={12} className={classes.container}>\n      <ItemHorizontalContainer\n        imageSize={theme.spacing(28)}\n        scrollAmount={theme.spacing(63)}\n      >\n        {seasons.map((season) => {\n          const {\n            air_date: airDate,\n            id,\n            name,\n            poster_path: posterPath,\n            season_number: seasonNumber,\n          } = season;\n\n          const isActive = seasonNumber === selectedSeason;\n          const seasonName = seasonNumber === 0 ? name : `S${seasonNumber}`;\n\n          let imagePath = TMDB_IMAGE_PREFIX;\n          if (posterPath) imagePath += `/w780${posterPath}`;\n\n          return (\n            <Grid\n              className={clsx(\n                classes.horizontalScrollItemSpacing,\n                { [classes.activeImage]: isActive },\n              )}\n              container\n              direction=\"column\"\n              onClick={() => handleCardClick(seasonNumber)}\n              spacing={1}\n              key={`tv-show-season-list-${id}`}\n            >\n              <Grid item className={classes.gridItem}>\n                {posterPath\n                  ? (\n                    <img\n                      className={classes.image}\n                      alt=\"Season cover\"\n                      src={imagePath}\n                    />\n                  )\n                  : (\n                    <BrokenImage\n                      type=\"baseImage\"\n                      extraClass={`${classes.activeImage} ${classes.image} ${classes.brokenImageContainer}`}\n                    />\n                  )}\n              </Grid>\n              <Grid item className={classes.gridItem}>\n                <Typography noWrap className={clsx({ [classes.emphasis]: isActive })}>\n                  {seasonName}\n                </Typography>\n                <Typography color=\"textSecondary\" variant=\"body2\" noWrap>\n                  {airDate ? moment(airDate).format('MMM D, YYYY') : NO_DATE_TEXT}\n                </Typography>\n              </Grid>\n            </Grid>\n          );\n        })}\n        {isMobile && (\n          <Grid container direction=\"column\" spacing={1}>\n            <Grid item className={classes.lastEntry} />\n          </Grid>\n        )}\n      </ItemHorizontalContainer>\n    </Grid>\n  );\n};\n\nexport default TVShowSeasonList;\n","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nimport { Grid } from '@material-ui/core';\n\nimport Statistic from '../../common/item/detail/Statistic';\n\nconst TVShowStatistics = () => {\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\n\n  const {\n    number_of_episodes: numberOfEpisodes,\n    number_of_seasons: numberOfSeasons,\n  } = tvShow;\n\n  return (\n    <Grid item container justify=\"center\" alignItems=\"center\">\n      <Statistic col={6} count={numberOfSeasons} label=\"Seasons\" divider />\n      <Statistic col={6} count={numberOfEpisodes} label=\"Episodes\" />\n    </Grid>\n  );\n};\n\nexport default TVShowStatistics;\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport moment from 'moment';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { usePath } from '../hooks';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Grid, useMediaQuery } from '@material-ui/core';\r\n\r\nimport ComponentLoader from '../components/common/ComponentLoader';\r\nimport ItemFooter from '../components/common/item/ItemFooter';\r\nimport Note from '../components/common/Note';\r\nimport ScrollToTop from '../components/common/ScrollToTop';\r\nimport Section from '../components/common/item/detail/Section';\r\nimport TVShowCast from '../components/tvShow/TVShowDetails/TVShowCast';\r\nimport TVShowEpisodes from '../components/tvShow/TVShowDetails/TVShowEpisodes';\r\nimport TVShowHeader from '../components/tvShow/TVShowDetails/TVShowHeader';\r\nimport TVShowProduction from '../components/tvShow/TVShowDetails/TVShowProduction';\r\nimport TVShowRecommendations from '../components/tvShow/TVShowDetails/TVShowRecommendations';\r\nimport TVShowReviews from '../components/tvShow/TVShowDetails/TVShowReviews';\r\nimport TVShowSeasonDetails from '../components/tvShow/TVShowDetails/TVShowSeasonDetails';\r\nimport TVShowSeasonList from '../components/tvShow/TVShowDetails/TVShowSeasonList';\r\nimport TVShowStatistics from '../components/tvShow/TVShowDetails/TVShowStatistics';\r\n\r\nimport { getTVShowDetails, getTVShowSeasonDetails } from '../api';\r\n\r\nimport { tvShowsActions } from '../reducers/ducks';\r\n\r\nimport { NOTE_NO_SELECTED_TV_SHOW, NOTE_TV_SHOW_NOT_FOUND } from '../constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(0, 2),\r\n  },\r\n  note: {\r\n    padding: theme.spacing(8, 2),\r\n  },\r\n}));\r\n\r\nconst TVShows = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.only('xs'));\r\n  const classes = useStyles();\r\n\r\n  const episodes = useSelector((state) => state.tvShows.episodes);\r\n  const itemDrawerOpen = useSelector((state) => state.sidebar.itemDrawerOpen);\r\n  const isTVShowLoading = useSelector((state) => state.tvShows.isTVShowLoading);\r\n  const tvShow = useSelector((state) => state.tvShows.tvShow);\r\n  const dispatch = useDispatch();\r\n\r\n  const [isLoaded, setIsLoaded] = useState(true);\r\n\r\n  const [, tvShowId] = usePath();\r\n\r\n  const {\r\n    cast,\r\n    created_by: createdBy,\r\n    first_air_date: firstAirDate,\r\n    name,\r\n    number_of_episodes: numberOfEpisodes,\r\n    number_of_seasons: numberOfSeasons,\r\n    original_name: originalName,\r\n    production_companies: productionCompanies,\r\n    recommendations,\r\n    reviews,\r\n    seasons,\r\n    tmdb,\r\n  } = tvShow;\r\n\r\n  const sectionVisibility = {\r\n    cast: cast && cast.length > 0,\r\n    episodes: episodes.filter((e) => (!e.air_date && e.air_date.length > 0)\r\n      || moment(e.air_date).diff(moment()) < 0).length > 0,\r\n    production: (createdBy && createdBy.length > 0)\r\n      || (productionCompanies && productionCompanies.length > 0),\r\n    recommendations: recommendations && recommendations.length > 0,\r\n    reviews: reviews && reviews.length > 0,\r\n    seasonList: seasons && seasons.length > 0,\r\n  };\r\n  const hasStatistics = !Number.isNaN(numberOfEpisodes)\r\n    && !Number.isNaN(numberOfSeasons)\r\n    && (numberOfEpisodes !== 0 && numberOfSeasons !== 0);\r\n\r\n  useEffect(() => {\r\n    if (tvShowId === 'search') return;\r\n\r\n    if (tvShowId) {\r\n      const parmesanio = process.env.REACT_APP_TMDB_PARMESANIO;\r\n\r\n      getTVShowDetails(parmesanio, tvShowId, (tvShowResponse) => {\r\n        const { seasons: fetchedSeason } = tvShowResponse;\r\n\r\n        if (fetchedSeason) {\r\n          const { season_number: latestSeason } = fetchedSeason\r\n            .sort((a, b) => b.season_number - a.season_number)\r\n            .find((e) => e.season_number > 0 && e.air_date);\r\n\r\n          getTVShowSeasonDetails(parmesanio, tvShowId, latestSeason, (episodeResponse) => {\r\n            dispatch(tvShowsActions.setActiveTVShow(tvShowResponse, episodeResponse, latestSeason));\r\n            dispatch(tvShowsActions.setDetailsLoading(false));\r\n            setIsLoaded(true);\r\n          }, (error) => {\r\n            dispatch(tvShowsActions.setActiveTVShow({}));\r\n            setIsLoaded(error.response.data.status_code);\r\n          });\r\n        }\r\n      }, (error) => {\r\n        if (error.response) {\r\n          dispatch(tvShowsActions.setActiveTVShow({}));\r\n          setIsLoaded(error.response.data.status_code);\r\n        }\r\n      });\r\n    }\r\n  }, [tvShowId, dispatch]);\r\n\r\n  if (tvShowId === undefined || tvShowId === 'search') {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_NO_SELECTED_TV_SHOW} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isTVShowLoading) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  if (isLoaded === 34) {\r\n    return (\r\n      <div className={classes.note}>\r\n        <Note details={NOTE_TV_SHOW_NOT_FOUND} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (Object.keys(tvShow).length === 0 && tvShow.constructor === Object) {\r\n    return <ComponentLoader location=\"itemcontainer\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={isMobile ? 4 : 8} className={classes.root}>\r\n        <Section\r\n          anchorId=\"tvshow-budget\"\r\n          divider={!hasStatistics}\r\n          isCollapsible={false}\r\n          visible={Object.keys(tvShow).length !== 0 && tvShow.constructor === Object}\r\n        >\r\n          <TVShowHeader sectionVisibility={sectionVisibility} />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-statistics\"\r\n          isCollapsible={false}\r\n          visible={hasStatistics}\r\n        >\r\n          <TVShowStatistics />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-seasons\"\r\n          divider={false}\r\n          title=\"Seasons\"\r\n          visible={sectionVisibility.seasonList}\r\n        >\r\n          <TVShowSeasonList />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-season-details\"\r\n          divider={!sectionVisibility.episodes}\r\n          isCollapsible={false}\r\n          visible={sectionVisibility.seasonList}\r\n        >\r\n          <TVShowSeasonDetails />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-episodes\"\r\n          isCollapsible={false}\r\n          title=\"Episodes\"\r\n          visible={sectionVisibility.episodes}\r\n        >\r\n          <TVShowEpisodes />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-cast\"\r\n          title=\"Cast\"\r\n          visible={sectionVisibility.cast}\r\n        >\r\n          <TVShowCast />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-production\"\r\n          title=\"Production\"\r\n          visible={sectionVisibility.production}\r\n        >\r\n          <TVShowProduction />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-reviews\"\r\n          divider\r\n          title=\"Reviews\"\r\n          visible={sectionVisibility.reviews}\r\n        >\r\n          <TVShowReviews />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-recommendations\"\r\n          title=\"Recommendations\"\r\n          visible={sectionVisibility.recommendations}\r\n        >\r\n          <TVShowRecommendations anchorId=\"tvshow-recommendations\" />\r\n        </Section>\r\n\r\n        <Section\r\n          anchorId=\"tvshow-end-credits\"\r\n          divider={false}\r\n        >\r\n          <ItemFooter\r\n            companies={productionCompanies.map((e) => e.name)}\r\n            link={tmdb}\r\n            title={name || originalName}\r\n            year={firstAirDate ? moment(firstAirDate).format('YYYY') : ''}\r\n          />\r\n        </Section>\r\n      </Grid>\r\n      {!itemDrawerOpen && <ScrollToTop />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TVShows;\r\n"],"sourceRoot":""}